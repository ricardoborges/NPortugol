//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\Git\\NPortugol\\src\\grammar\\ASM.g 2012-05-09 11:02:58

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ASMLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int ADD=4;
	public const int CALL=5;
	public const int CNT=6;
	public const int COMMENT=7;
	public const int DCL=8;
	public const int DEC=9;
	public const int DIV=10;
	public const int ESC_SEQ=11;
	public const int EXIT=12;
	public const int EXPONENT=13;
	public const int FLOAT=14;
	public const int HEX_DIGIT=15;
	public const int HOST=16;
	public const int ID=17;
	public const int INC=18;
	public const int INT=19;
	public const int JE=20;
	public const int JG=21;
	public const int JGE=22;
	public const int JL=23;
	public const int JLE=24;
	public const int JMP=25;
	public const int JNE=26;
	public const int MOD=27;
	public const int MOV=28;
	public const int MUL=29;
	public const int NEG=30;
	public const int NEWLINE=31;
	public const int OCTAL_ESC=32;
	public const int POP=33;
	public const int POW=34;
	public const int PUSH=35;
	public const int RET=36;
	public const int SADD=37;
	public const int SDIV=38;
	public const int SMUL=39;
	public const int SSUB=40;
	public const int STRING=41;
	public const int SUB=42;
	public const int UNICODE_ESC=43;
	public const int WS=44;

    // delegates
    // delegators

	public ASMLexer()
	{
		OnCreated();
	}

	public ASMLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ASMLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "E:\\Git\\NPortugol\\src\\grammar\\ASM.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_ADD();
	partial void LeaveRule_ADD();

	// $ANTLR start "ADD"
	[GrammarRule("ADD")]
	private void mADD()
	{
		EnterRule_ADD();
		EnterRule("ADD", 1);
		TraceIn("ADD", 1);
		try
		{
			int _type = ADD;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:7:5: ( 'ADD' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:7:7: 'ADD'
			{
			DebugLocation(7, 7);
			Match("ADD"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ADD", 1);
			LeaveRule("ADD", 1);
			LeaveRule_ADD();
		}
	}
	// $ANTLR end "ADD"

	partial void EnterRule_CALL();
	partial void LeaveRule_CALL();

	// $ANTLR start "CALL"
	[GrammarRule("CALL")]
	private void mCALL()
	{
		EnterRule_CALL();
		EnterRule("CALL", 2);
		TraceIn("CALL", 2);
		try
		{
			int _type = CALL;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:8:6: ( 'CALL' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:8:8: 'CALL'
			{
			DebugLocation(8, 8);
			Match("CALL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CALL", 2);
			LeaveRule("CALL", 2);
			LeaveRule_CALL();
		}
	}
	// $ANTLR end "CALL"

	partial void EnterRule_CNT();
	partial void LeaveRule_CNT();

	// $ANTLR start "CNT"
	[GrammarRule("CNT")]
	private void mCNT()
	{
		EnterRule_CNT();
		EnterRule("CNT", 3);
		TraceIn("CNT", 3);
		try
		{
			int _type = CNT;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:9:5: ( 'CNT' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:9:7: 'CNT'
			{
			DebugLocation(9, 7);
			Match("CNT"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CNT", 3);
			LeaveRule("CNT", 3);
			LeaveRule_CNT();
		}
	}
	// $ANTLR end "CNT"

	partial void EnterRule_DCL();
	partial void LeaveRule_DCL();

	// $ANTLR start "DCL"
	[GrammarRule("DCL")]
	private void mDCL()
	{
		EnterRule_DCL();
		EnterRule("DCL", 4);
		TraceIn("DCL", 4);
		try
		{
			int _type = DCL;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:10:5: ( 'DCL' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:10:7: 'DCL'
			{
			DebugLocation(10, 7);
			Match("DCL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DCL", 4);
			LeaveRule("DCL", 4);
			LeaveRule_DCL();
		}
	}
	// $ANTLR end "DCL"

	partial void EnterRule_DEC();
	partial void LeaveRule_DEC();

	// $ANTLR start "DEC"
	[GrammarRule("DEC")]
	private void mDEC()
	{
		EnterRule_DEC();
		EnterRule("DEC", 5);
		TraceIn("DEC", 5);
		try
		{
			int _type = DEC;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:11:5: ( 'DEC' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:11:7: 'DEC'
			{
			DebugLocation(11, 7);
			Match("DEC"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEC", 5);
			LeaveRule("DEC", 5);
			LeaveRule_DEC();
		}
	}
	// $ANTLR end "DEC"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 6);
		TraceIn("DIV", 6);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:12:5: ( 'DIV' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:12:7: 'DIV'
			{
			DebugLocation(12, 7);
			Match("DIV"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 6);
			LeaveRule("DIV", 6);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_EXIT();
	partial void LeaveRule_EXIT();

	// $ANTLR start "EXIT"
	[GrammarRule("EXIT")]
	private void mEXIT()
	{
		EnterRule_EXIT();
		EnterRule("EXIT", 7);
		TraceIn("EXIT", 7);
		try
		{
			int _type = EXIT;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:13:6: ( 'EXIT' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:13:8: 'EXIT'
			{
			DebugLocation(13, 8);
			Match("EXIT"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXIT", 7);
			LeaveRule("EXIT", 7);
			LeaveRule_EXIT();
		}
	}
	// $ANTLR end "EXIT"

	partial void EnterRule_HOST();
	partial void LeaveRule_HOST();

	// $ANTLR start "HOST"
	[GrammarRule("HOST")]
	private void mHOST()
	{
		EnterRule_HOST();
		EnterRule("HOST", 8);
		TraceIn("HOST", 8);
		try
		{
			int _type = HOST;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:14:6: ( 'HOST' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:14:8: 'HOST'
			{
			DebugLocation(14, 8);
			Match("HOST"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HOST", 8);
			LeaveRule("HOST", 8);
			LeaveRule_HOST();
		}
	}
	// $ANTLR end "HOST"

	partial void EnterRule_INC();
	partial void LeaveRule_INC();

	// $ANTLR start "INC"
	[GrammarRule("INC")]
	private void mINC()
	{
		EnterRule_INC();
		EnterRule("INC", 9);
		TraceIn("INC", 9);
		try
		{
			int _type = INC;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:15:5: ( 'INC' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:15:7: 'INC'
			{
			DebugLocation(15, 7);
			Match("INC"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INC", 9);
			LeaveRule("INC", 9);
			LeaveRule_INC();
		}
	}
	// $ANTLR end "INC"

	partial void EnterRule_JE();
	partial void LeaveRule_JE();

	// $ANTLR start "JE"
	[GrammarRule("JE")]
	private void mJE()
	{
		EnterRule_JE();
		EnterRule("JE", 10);
		TraceIn("JE", 10);
		try
		{
			int _type = JE;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:16:4: ( 'JE' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:16:6: 'JE'
			{
			DebugLocation(16, 6);
			Match("JE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JE", 10);
			LeaveRule("JE", 10);
			LeaveRule_JE();
		}
	}
	// $ANTLR end "JE"

	partial void EnterRule_JG();
	partial void LeaveRule_JG();

	// $ANTLR start "JG"
	[GrammarRule("JG")]
	private void mJG()
	{
		EnterRule_JG();
		EnterRule("JG", 11);
		TraceIn("JG", 11);
		try
		{
			int _type = JG;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:17:4: ( 'JG' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:17:6: 'JG'
			{
			DebugLocation(17, 6);
			Match("JG"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JG", 11);
			LeaveRule("JG", 11);
			LeaveRule_JG();
		}
	}
	// $ANTLR end "JG"

	partial void EnterRule_JGE();
	partial void LeaveRule_JGE();

	// $ANTLR start "JGE"
	[GrammarRule("JGE")]
	private void mJGE()
	{
		EnterRule_JGE();
		EnterRule("JGE", 12);
		TraceIn("JGE", 12);
		try
		{
			int _type = JGE;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:18:5: ( 'JGE' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:18:7: 'JGE'
			{
			DebugLocation(18, 7);
			Match("JGE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JGE", 12);
			LeaveRule("JGE", 12);
			LeaveRule_JGE();
		}
	}
	// $ANTLR end "JGE"

	partial void EnterRule_JL();
	partial void LeaveRule_JL();

	// $ANTLR start "JL"
	[GrammarRule("JL")]
	private void mJL()
	{
		EnterRule_JL();
		EnterRule("JL", 13);
		TraceIn("JL", 13);
		try
		{
			int _type = JL;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:19:4: ( 'JL' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:19:6: 'JL'
			{
			DebugLocation(19, 6);
			Match("JL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JL", 13);
			LeaveRule("JL", 13);
			LeaveRule_JL();
		}
	}
	// $ANTLR end "JL"

	partial void EnterRule_JLE();
	partial void LeaveRule_JLE();

	// $ANTLR start "JLE"
	[GrammarRule("JLE")]
	private void mJLE()
	{
		EnterRule_JLE();
		EnterRule("JLE", 14);
		TraceIn("JLE", 14);
		try
		{
			int _type = JLE;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:20:5: ( 'JLE' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:20:7: 'JLE'
			{
			DebugLocation(20, 7);
			Match("JLE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JLE", 14);
			LeaveRule("JLE", 14);
			LeaveRule_JLE();
		}
	}
	// $ANTLR end "JLE"

	partial void EnterRule_JMP();
	partial void LeaveRule_JMP();

	// $ANTLR start "JMP"
	[GrammarRule("JMP")]
	private void mJMP()
	{
		EnterRule_JMP();
		EnterRule("JMP", 15);
		TraceIn("JMP", 15);
		try
		{
			int _type = JMP;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:21:5: ( 'JMP' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:21:7: 'JMP'
			{
			DebugLocation(21, 7);
			Match("JMP"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JMP", 15);
			LeaveRule("JMP", 15);
			LeaveRule_JMP();
		}
	}
	// $ANTLR end "JMP"

	partial void EnterRule_JNE();
	partial void LeaveRule_JNE();

	// $ANTLR start "JNE"
	[GrammarRule("JNE")]
	private void mJNE()
	{
		EnterRule_JNE();
		EnterRule("JNE", 16);
		TraceIn("JNE", 16);
		try
		{
			int _type = JNE;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:22:5: ( 'JNE' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:22:7: 'JNE'
			{
			DebugLocation(22, 7);
			Match("JNE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JNE", 16);
			LeaveRule("JNE", 16);
			LeaveRule_JNE();
		}
	}
	// $ANTLR end "JNE"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 17);
		TraceIn("MOD", 17);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:23:5: ( 'MOD' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:23:7: 'MOD'
			{
			DebugLocation(23, 7);
			Match("MOD"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 17);
			LeaveRule("MOD", 17);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_MOV();
	partial void LeaveRule_MOV();

	// $ANTLR start "MOV"
	[GrammarRule("MOV")]
	private void mMOV()
	{
		EnterRule_MOV();
		EnterRule("MOV", 18);
		TraceIn("MOV", 18);
		try
		{
			int _type = MOV;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:24:5: ( 'MOV' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:24:7: 'MOV'
			{
			DebugLocation(24, 7);
			Match("MOV"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOV", 18);
			LeaveRule("MOV", 18);
			LeaveRule_MOV();
		}
	}
	// $ANTLR end "MOV"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 19);
		TraceIn("MUL", 19);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:25:5: ( 'MUL' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:25:7: 'MUL'
			{
			DebugLocation(25, 7);
			Match("MUL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 19);
			LeaveRule("MUL", 19);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_NEG();
	partial void LeaveRule_NEG();

	// $ANTLR start "NEG"
	[GrammarRule("NEG")]
	private void mNEG()
	{
		EnterRule_NEG();
		EnterRule("NEG", 20);
		TraceIn("NEG", 20);
		try
		{
			int _type = NEG;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:26:5: ( 'NEG' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:26:7: 'NEG'
			{
			DebugLocation(26, 7);
			Match("NEG"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEG", 20);
			LeaveRule("NEG", 20);
			LeaveRule_NEG();
		}
	}
	// $ANTLR end "NEG"

	partial void EnterRule_POP();
	partial void LeaveRule_POP();

	// $ANTLR start "POP"
	[GrammarRule("POP")]
	private void mPOP()
	{
		EnterRule_POP();
		EnterRule("POP", 21);
		TraceIn("POP", 21);
		try
		{
			int _type = POP;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:27:5: ( 'POP' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:27:7: 'POP'
			{
			DebugLocation(27, 7);
			Match("POP"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POP", 21);
			LeaveRule("POP", 21);
			LeaveRule_POP();
		}
	}
	// $ANTLR end "POP"

	partial void EnterRule_POW();
	partial void LeaveRule_POW();

	// $ANTLR start "POW"
	[GrammarRule("POW")]
	private void mPOW()
	{
		EnterRule_POW();
		EnterRule("POW", 22);
		TraceIn("POW", 22);
		try
		{
			int _type = POW;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:28:5: ( 'POW' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:28:7: 'POW'
			{
			DebugLocation(28, 7);
			Match("POW"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POW", 22);
			LeaveRule("POW", 22);
			LeaveRule_POW();
		}
	}
	// $ANTLR end "POW"

	partial void EnterRule_PUSH();
	partial void LeaveRule_PUSH();

	// $ANTLR start "PUSH"
	[GrammarRule("PUSH")]
	private void mPUSH()
	{
		EnterRule_PUSH();
		EnterRule("PUSH", 23);
		TraceIn("PUSH", 23);
		try
		{
			int _type = PUSH;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:29:6: ( 'PUSH' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:29:8: 'PUSH'
			{
			DebugLocation(29, 8);
			Match("PUSH"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PUSH", 23);
			LeaveRule("PUSH", 23);
			LeaveRule_PUSH();
		}
	}
	// $ANTLR end "PUSH"

	partial void EnterRule_RET();
	partial void LeaveRule_RET();

	// $ANTLR start "RET"
	[GrammarRule("RET")]
	private void mRET()
	{
		EnterRule_RET();
		EnterRule("RET", 24);
		TraceIn("RET", 24);
		try
		{
			int _type = RET;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:30:5: ( 'RET' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:30:7: 'RET'
			{
			DebugLocation(30, 7);
			Match("RET"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RET", 24);
			LeaveRule("RET", 24);
			LeaveRule_RET();
		}
	}
	// $ANTLR end "RET"

	partial void EnterRule_SADD();
	partial void LeaveRule_SADD();

	// $ANTLR start "SADD"
	[GrammarRule("SADD")]
	private void mSADD()
	{
		EnterRule_SADD();
		EnterRule("SADD", 25);
		TraceIn("SADD", 25);
		try
		{
			int _type = SADD;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:31:6: ( 'SADD' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:31:8: 'SADD'
			{
			DebugLocation(31, 8);
			Match("SADD"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SADD", 25);
			LeaveRule("SADD", 25);
			LeaveRule_SADD();
		}
	}
	// $ANTLR end "SADD"

	partial void EnterRule_SDIV();
	partial void LeaveRule_SDIV();

	// $ANTLR start "SDIV"
	[GrammarRule("SDIV")]
	private void mSDIV()
	{
		EnterRule_SDIV();
		EnterRule("SDIV", 26);
		TraceIn("SDIV", 26);
		try
		{
			int _type = SDIV;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:32:6: ( 'SDIV' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:32:8: 'SDIV'
			{
			DebugLocation(32, 8);
			Match("SDIV"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SDIV", 26);
			LeaveRule("SDIV", 26);
			LeaveRule_SDIV();
		}
	}
	// $ANTLR end "SDIV"

	partial void EnterRule_SMUL();
	partial void LeaveRule_SMUL();

	// $ANTLR start "SMUL"
	[GrammarRule("SMUL")]
	private void mSMUL()
	{
		EnterRule_SMUL();
		EnterRule("SMUL", 27);
		TraceIn("SMUL", 27);
		try
		{
			int _type = SMUL;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:33:6: ( 'SMUL' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:33:8: 'SMUL'
			{
			DebugLocation(33, 8);
			Match("SMUL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SMUL", 27);
			LeaveRule("SMUL", 27);
			LeaveRule_SMUL();
		}
	}
	// $ANTLR end "SMUL"

	partial void EnterRule_SSUB();
	partial void LeaveRule_SSUB();

	// $ANTLR start "SSUB"
	[GrammarRule("SSUB")]
	private void mSSUB()
	{
		EnterRule_SSUB();
		EnterRule("SSUB", 28);
		TraceIn("SSUB", 28);
		try
		{
			int _type = SSUB;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:34:6: ( 'SSUB' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:34:8: 'SSUB'
			{
			DebugLocation(34, 8);
			Match("SSUB"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SSUB", 28);
			LeaveRule("SSUB", 28);
			LeaveRule_SSUB();
		}
	}
	// $ANTLR end "SSUB"

	partial void EnterRule_SUB();
	partial void LeaveRule_SUB();

	// $ANTLR start "SUB"
	[GrammarRule("SUB")]
	private void mSUB()
	{
		EnterRule_SUB();
		EnterRule("SUB", 29);
		TraceIn("SUB", 29);
		try
		{
			int _type = SUB;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:35:5: ( 'SUB' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:35:7: 'SUB'
			{
			DebugLocation(35, 7);
			Match("SUB"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SUB", 29);
			LeaveRule("SUB", 29);
			LeaveRule_SUB();
		}
	}
	// $ANTLR end "SUB"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 30);
		TraceIn("T__45", 30);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:36:7: ( ',' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:36:9: ','
			{
			DebugLocation(36, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 30);
			LeaveRule("T__45", 30);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 31);
		TraceIn("T__46", 31);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:37:7: ( '.' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:37:9: '.'
			{
			DebugLocation(37, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 31);
			LeaveRule("T__46", 31);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 32);
		TraceIn("T__47", 32);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:38:7: ( ':' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:38:9: ':'
			{
			DebugLocation(38, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 32);
			LeaveRule("T__47", 32);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 33);
		TraceIn("ID", 33);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:182:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:182:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(182, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(182, 31);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:182:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
					{
					DebugLocation(182, 31);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 33);
			LeaveRule("ID", 33);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 34);
		TraceIn("INT", 34);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:185:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:185:7: ( '0' .. '9' )+
			{
			DebugLocation(185, 7);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:185:7: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
					{
					DebugLocation(185, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 34);
			LeaveRule("INT", 34);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 35);
		TraceIn("FLOAT", 35);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:189:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			try
			{
				alt9 = dfa9.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:189:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(189, 9);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:189:9: ( '0' .. '9' )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='0' && LA3_0<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
						{
						DebugLocation(189, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(189, 21);
				Match('.'); 
				DebugLocation(189, 25);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:189:25: ( '0' .. '9' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if (((LA4_0>='0' && LA4_0<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
						{
						DebugLocation(189, 25);
						input.Consume();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(189, 37);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:189:37: ( EXPONENT )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='E'||LA5_0=='e'))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:189:37: EXPONENT
					{
					DebugLocation(189, 37);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(5); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:190:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(190, 9);
				Match('.'); 
				DebugLocation(190, 13);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:190:13: ( '0' .. '9' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='0' && LA6_0<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
						{
						DebugLocation(190, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(190, 25);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:190:25: ( EXPONENT )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='E'||LA7_0=='e'))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:190:25: EXPONENT
					{
					DebugLocation(190, 25);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:191:9: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(191, 9);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:191:9: ( '0' .. '9' )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>='0' && LA8_0<='9')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
						{
						DebugLocation(191, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(191, 21);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 35);
			LeaveRule("FLOAT", 35);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 36);
		TraceIn("NEWLINE", 36);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:194:8: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:194:9: ( '\\r' )? '\\n'
			{
			DebugLocation(194, 9);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:194:9: ( '\\r' )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0=='\r'))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:194:9: '\\r'
				{
				DebugLocation(194, 9);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(194, 15);
			Match('\n'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 36);
			LeaveRule("NEWLINE", 36);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 37);
		TraceIn("COMMENT", 37);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:197:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0=='/'))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1=='/'))
				{
					alt14 = 1;
				}
				else if ((LA14_1=='*'))
				{
					alt14 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:197:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(197, 9);
				Match("//"); 

				DebugLocation(197, 14);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:197:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if (((LA11_0>='\u0000' && LA11_0<='\t')||(LA11_0>='\u000B' && LA11_0<='\f')||(LA11_0>='\u000E' && LA11_0<='\uFFFF')))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
						{
						DebugLocation(197, 14);
						input.Consume();


						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(197, 28);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:197:28: ( '\\r' )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0=='\r'))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:197:28: '\\r'
					{
					DebugLocation(197, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(197, 34);
				Match('\n'); 
				DebugLocation(197, 39);
				_channel=Hidden;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:198:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(198, 9);
				Match("/*"); 

				DebugLocation(198, 14);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:198:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0=='*'))
					{
						int LA13_1 = input.LA(2);

						if ((LA13_1=='/'))
						{
							alt13 = 2;
						}
						else if (((LA13_1>='\u0000' && LA13_1<='.')||(LA13_1>='0' && LA13_1<='\uFFFF')))
						{
							alt13 = 1;
						}


					}
					else if (((LA13_0>='\u0000' && LA13_0<=')')||(LA13_0>='+' && LA13_0<='\uFFFF')))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:198:42: .
						{
						DebugLocation(198, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(198, 47);
				Match("*/"); 

				DebugLocation(198, 52);
				_channel=Hidden;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 37);
			LeaveRule("COMMENT", 37);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 38);
		TraceIn("WS", 38);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:201:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:201:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(201, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(205, 11);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 38);
			LeaveRule("WS", 38);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 39);
		TraceIn("STRING", 39);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:210:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:210:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(210, 8);
			Match('\"'); 
			DebugLocation(210, 12);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:210:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=3;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0=='\\'))
				{
					alt15 = 1;
				}
				else if (((LA15_0>='\u0000' && LA15_0<='!')||(LA15_0>='#' && LA15_0<='[')||(LA15_0>=']' && LA15_0<='\uFFFF')))
				{
					alt15 = 2;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:210:14: ESC_SEQ
					{
					DebugLocation(210, 14);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:210:24: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(210, 24);
					input.Consume();


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(210, 39);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 39);
			LeaveRule("STRING", 39);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 40);
		TraceIn("EXPONENT", 40);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:215:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:215:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(215, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(215, 22);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:215:22: ( '+' | '-' )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0=='+'||LA16_0=='-'))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
				{
				DebugLocation(215, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(215, 33);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:215:33: ( '0' .. '9' )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if (((LA17_0>='0' && LA17_0<='9')))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
					{
					DebugLocation(215, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 40);
			LeaveRule("EXPONENT", 40);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 41);
		TraceIn("HEX_DIGIT", 41);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:218:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:
			{
			DebugLocation(218, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 41);
			LeaveRule("HEX_DIGIT", 41);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 42);
		TraceIn("ESC_SEQ", 42);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:222:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt18=3;
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt18 = 1;
					}
					break;
				case 'u':
					{
					alt18 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt18 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:222:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(222, 9);
				Match('\\'); 
				DebugLocation(222, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:223:9: UNICODE_ESC
				{
				DebugLocation(223, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:224:9: OCTAL_ESC
				{
				DebugLocation(224, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 42);
			LeaveRule("ESC_SEQ", 42);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 43);
		TraceIn("OCTAL_ESC", 43);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:229:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt19=3;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0=='\\'))
			{
				int LA19_1 = input.LA(2);

				if (((LA19_1>='0' && LA19_1<='3')))
				{
					int LA19_2 = input.LA(3);

					if (((LA19_2>='0' && LA19_2<='7')))
					{
						int LA19_4 = input.LA(4);

						if (((LA19_4>='0' && LA19_4<='7')))
						{
							alt19 = 1;
						}
						else
						{
							alt19 = 2;
						}
					}
					else
					{
						alt19 = 3;
					}
				}
				else if (((LA19_1>='4' && LA19_1<='7')))
				{
					int LA19_3 = input.LA(3);

					if (((LA19_3>='0' && LA19_3<='7')))
					{
						alt19 = 2;
					}
					else
					{
						alt19 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:229:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(229, 9);
				Match('\\'); 
				DebugLocation(229, 14);
				input.Consume();

				DebugLocation(229, 25);
				input.Consume();

				DebugLocation(229, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:230:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(230, 9);
				Match('\\'); 
				DebugLocation(230, 14);
				input.Consume();

				DebugLocation(230, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:231:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(231, 9);
				Match('\\'); 
				DebugLocation(231, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 43);
			LeaveRule("OCTAL_ESC", 43);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 44);
		TraceIn("UNICODE_ESC", 44);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:236:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:236:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(236, 9);
			Match('\\'); 
			DebugLocation(236, 14);
			Match('u'); 
			DebugLocation(236, 18);
			mHEX_DIGIT(); 
			DebugLocation(236, 28);
			mHEX_DIGIT(); 
			DebugLocation(236, 38);
			mHEX_DIGIT(); 
			DebugLocation(236, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 44);
			LeaveRule("UNICODE_ESC", 44);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	public override void mTokens()
	{
		// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:8: ( ADD | CALL | CNT | DCL | DEC | DIV | EXIT | HOST | INC | JE | JG | JGE | JL | JLE | JMP | JNE | MOD | MOV | MUL | NEG | POP | POW | PUSH | RET | SADD | SDIV | SMUL | SSUB | SUB | T__45 | T__46 | T__47 | ID | INT | FLOAT | NEWLINE | COMMENT | WS | STRING )
		int alt20=39;
		try { DebugEnterDecision(20, false);
		try
		{
			alt20 = dfa20.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(20); }
		switch (alt20)
		{
		case 1:
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:10: ADD
			{
			DebugLocation(1, 10);
			mADD(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:14: CALL
			{
			DebugLocation(1, 14);
			mCALL(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:19: CNT
			{
			DebugLocation(1, 19);
			mCNT(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:23: DCL
			{
			DebugLocation(1, 23);
			mDCL(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:27: DEC
			{
			DebugLocation(1, 27);
			mDEC(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:31: DIV
			{
			DebugLocation(1, 31);
			mDIV(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:35: EXIT
			{
			DebugLocation(1, 35);
			mEXIT(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:40: HOST
			{
			DebugLocation(1, 40);
			mHOST(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:45: INC
			{
			DebugLocation(1, 45);
			mINC(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:49: JE
			{
			DebugLocation(1, 49);
			mJE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:52: JG
			{
			DebugLocation(1, 52);
			mJG(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:55: JGE
			{
			DebugLocation(1, 55);
			mJGE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:59: JL
			{
			DebugLocation(1, 59);
			mJL(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:62: JLE
			{
			DebugLocation(1, 62);
			mJLE(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:66: JMP
			{
			DebugLocation(1, 66);
			mJMP(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:70: JNE
			{
			DebugLocation(1, 70);
			mJNE(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:74: MOD
			{
			DebugLocation(1, 74);
			mMOD(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:78: MOV
			{
			DebugLocation(1, 78);
			mMOV(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:82: MUL
			{
			DebugLocation(1, 82);
			mMUL(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:86: NEG
			{
			DebugLocation(1, 86);
			mNEG(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:90: POP
			{
			DebugLocation(1, 90);
			mPOP(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:94: POW
			{
			DebugLocation(1, 94);
			mPOW(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:98: PUSH
			{
			DebugLocation(1, 98);
			mPUSH(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:103: RET
			{
			DebugLocation(1, 103);
			mRET(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:107: SADD
			{
			DebugLocation(1, 107);
			mSADD(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:112: SDIV
			{
			DebugLocation(1, 112);
			mSDIV(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:117: SMUL
			{
			DebugLocation(1, 117);
			mSMUL(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:122: SSUB
			{
			DebugLocation(1, 122);
			mSSUB(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:127: SUB
			{
			DebugLocation(1, 127);
			mSUB(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:131: T__45
			{
			DebugLocation(1, 131);
			mT__45(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:137: T__46
			{
			DebugLocation(1, 137);
			mT__46(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:143: T__47
			{
			DebugLocation(1, 143);
			mT__47(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:149: ID
			{
			DebugLocation(1, 149);
			mID(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:152: INT
			{
			DebugLocation(1, 152);
			mINT(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:156: FLOAT
			{
			DebugLocation(1, 156);
			mFLOAT(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:162: NEWLINE
			{
			DebugLocation(1, 162);
			mNEWLINE(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:170: COMMENT
			{
			DebugLocation(1, 170);
			mCOMMENT(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:178: WS
			{
			DebugLocation(1, 178);
			mWS(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// E:\\Git\\NPortugol\\src\\grammar\\ASM.g:1:181: STRING
			{
			DebugLocation(1, 181);
			mSTRING(); 

			}
			break;

		}

	}


	#region DFA
	DFA9 dfa9;
	DFA20 dfa20;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this);
		dfa20 = new DFA20(this);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x5\xFFFF";
		private const string DFA9_eofS =
			"\x5\xFFFF";
		private const string DFA9_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA9_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA9_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA9_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "188:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x1\xFFFF\xC\x10\x1\xFFFF\x1\x30\x2\xFFFF\x1\x32\x1\x15\x4\xFFFF\x9\x10"+
			"\x1\x3D\x1\x3F\x1\x41\xD\x10\x4\xFFFF\x1\x51\x1\x10\x1\x53\x1\x54\x1"+
			"\x55\x1\x56\x2\x10\x1\x59\x1\xFFFF\x1\x5A\x1\xFFFF\x1\x5B\x1\xFFFF\x1"+
			"\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62\x1\x63\x1\x10\x1\x65\x4"+
			"\x10\x1\x6A\x1\xFFFF\x1\x6B\x4\xFFFF\x1\x6C\x1\x6D\xB\xFFFF\x1\x6E\x1"+
			"\xFFFF\x1\x6F\x1\x70\x1\x71\x1\x72\x9\xFFFF";
		private const string DFA20_eofS =
			"\x73\xFFFF";
		private const string DFA20_minS =
			"\x1\x9\x1\x44\x1\x41\x1\x43\x1\x58\x1\x4F\x1\x4E\x1\x45\x1\x4F\x1\x45"+
			"\x1\x4F\x1\x45\x1\x41\x1\xFFFF\x1\x30\x2\xFFFF\x1\x2E\x1\xA\x4\xFFFF"+
			"\x1\x44\x1\x4C\x1\x54\x1\x4C\x1\x43\x1\x56\x1\x49\x1\x53\x1\x43\x3\x30"+
			"\x1\x50\x1\x45\x1\x44\x1\x4C\x1\x47\x1\x50\x1\x53\x1\x54\x1\x44\x1\x49"+
			"\x2\x55\x1\x42\x4\xFFFF\x1\x30\x1\x4C\x4\x30\x2\x54\x1\x30\x1\xFFFF\x1"+
			"\x30\x1\xFFFF\x1\x30\x1\xFFFF\x8\x30\x1\x48\x1\x30\x1\x44\x1\x56\x1\x4C"+
			"\x1\x42\x1\x30\x1\xFFFF\x1\x30\x4\xFFFF\x2\x30\xB\xFFFF\x1\x30\x1\xFFFF"+
			"\x4\x30\x9\xFFFF";
		private const string DFA20_maxS =
			"\x1\x7A\x1\x44\x1\x4E\x1\x49\x1\x58\x1\x4F\x2\x4E\x1\x55\x1\x45\x1\x55"+
			"\x1\x45\x1\x55\x1\xFFFF\x1\x39\x2\xFFFF\x1\x65\x1\xA\x4\xFFFF\x1\x44"+
			"\x1\x4C\x1\x54\x1\x4C\x1\x43\x1\x56\x1\x49\x1\x53\x1\x43\x3\x7A\x1\x50"+
			"\x1\x45\x1\x56\x1\x4C\x1\x47\x1\x57\x1\x53\x1\x54\x1\x44\x1\x49\x2\x55"+
			"\x1\x42\x4\xFFFF\x1\x7A\x1\x4C\x4\x7A\x2\x54\x1\x7A\x1\xFFFF\x1\x7A\x1"+
			"\xFFFF\x1\x7A\x1\xFFFF\x8\x7A\x1\x48\x1\x7A\x1\x44\x1\x56\x1\x4C\x1\x42"+
			"\x1\x7A\x1\xFFFF\x1\x7A\x4\xFFFF\x2\x7A\xB\xFFFF\x1\x7A\x1\xFFFF\x4\x7A"+
			"\x9\xFFFF";
		private const string DFA20_acceptS =
			"\xD\xFFFF\x1\x1E\x1\xFFFF\x1\x20\x1\x21\x2\xFFFF\x1\x24\x1\x25\x1\x26"+
			"\x1\x27\x19\xFFFF\x1\x1F\x1\x23\x1\x22\x1\x24\x9\xFFFF\x1\xA\x1\xFFFF"+
			"\x1\xB\x1\xFFFF\x1\xD\xF\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6"+
			"\x2\xFFFF\x1\x9\x1\xC\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\xFFFF\x1\x18\x4\xFFFF\x1\x1D\x1\x2\x1\x7\x1\x8\x1\x17"+
			"\x1\x19\x1\x1A\x1\x1B\x1\x1C";
		private const string DFA20_specialS =
			"\x73\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x15\x1\x13\x2\xFFFF\x1\x12\x12\xFFFF\x1\x15\x1\xFFFF\x1\x16\x9\xFFFF"+
				"\x1\xD\x1\xFFFF\x1\xE\x1\x14\xA\x11\x1\xF\x6\xFFFF\x1\x1\x1\x10\x1\x2"+
				"\x1\x3\x1\x4\x2\x10\x1\x5\x1\x6\x1\x7\x2\x10\x1\x8\x1\x9\x1\x10\x1\xA"+
				"\x1\x10\x1\xB\x1\xC\x7\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x17",
				"\x1\x18\xC\xFFFF\x1\x19",
				"\x1\x1A\x1\xFFFF\x1\x1B\x3\xFFFF\x1\x1C",
				"\x1\x1D",
				"\x1\x1E",
				"\x1\x1F",
				"\x1\x20\x1\xFFFF\x1\x21\x4\xFFFF\x1\x22\x1\x23\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x26",
				"\x1\x27",
				"\x1\x28\x5\xFFFF\x1\x29",
				"\x1\x2A",
				"\x1\x2B\x2\xFFFF\x1\x2C\x8\xFFFF\x1\x2D\x5\xFFFF\x1\x2E\x1\xFFFF\x1"+
				"\x2F",
				"",
				"\xA\x31",
				"",
				"",
				"\x1\x31\x1\xFFFF\xA\x11\xB\xFFFF\x1\x31\x1F\xFFFF\x1\x31",
				"\x1\x33",
				"",
				"",
				"",
				"",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\x1\x38",
				"\x1\x39",
				"\x1\x3A",
				"\x1\x3B",
				"\x1\x3C",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x4\x10\x1\x3E\x15\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				"\xA\x10\x7\xFFFF\x4\x10\x1\x40\x15\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44\x11\xFFFF\x1\x45",
				"\x1\x46",
				"\x1\x47",
				"\x1\x48\x6\xFFFF\x1\x49",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"",
				"",
				"",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x52",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x57",
				"\x1\x58",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x64",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"",
				"",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( ADD | CALL | CNT | DCL | DEC | DIV | EXIT | HOST | INC | JE | JG | JGE | JL | JLE | JMP | JNE | MOD | MOV | MUL | NEG | POP | POW | PUSH | RET | SADD | SDIV | SMUL | SSUB | SUB | T__45 | T__46 | T__47 | ID | INT | FLOAT | NEWLINE | COMMENT | WS | STRING );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
