//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g 2014-04-14 02:11:53

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

using System.Collections;

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace NPortugol
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class NPortugolWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AR", "ARG", "ASGN", "ASM", "CALL", "CHAR", "DEC", "ESC_SEQ", "EXP", "EXPONENT", "F", "FLOAT", "FUNC", "HEX_DIGIT", "ID", "ILIST", "INDEX", "INIT", "INT", "JMP", "LEXP", "LOOP", "MCALL", "NEWLINE", "OCTAL_ESC", "PARAM", "PCALL", "RET", "SJMP", "SLIST", "STRING", "T", "UNICODE_ESC", "VAR", "WS", "'!='", "'#'", "'%'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'..'", "'/'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'até'", "'decrescente'", "'e'", "'enquanto'", "'então'", "'fim'", "'função'", "'ou'", "'para'", "'repita'", "'retorne'", "'se'", "'senão'", "'variável'", "'{'", "'}'", "'falso'", "'nulo'", "'verdadeiro'"
	};
	public const int EOF=-1;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int AR=4;
	public const int ARG=5;
	public const int ASGN=6;
	public const int ASM=7;
	public const int CALL=8;
	public const int CHAR=9;
	public const int DEC=10;
	public const int ESC_SEQ=11;
	public const int EXP=12;
	public const int EXPONENT=13;
	public const int F=14;
	public const int FLOAT=15;
	public const int FUNC=16;
	public const int HEX_DIGIT=17;
	public const int ID=18;
	public const int ILIST=19;
	public const int INDEX=20;
	public const int INIT=21;
	public const int INT=22;
	public const int JMP=23;
	public const int LEXP=24;
	public const int LOOP=25;
	public const int MCALL=26;
	public const int NEWLINE=27;
	public const int OCTAL_ESC=28;
	public const int PARAM=29;
	public const int PCALL=30;
	public const int RET=31;
	public const int SJMP=32;
	public const int SLIST=33;
	public const int STRING=34;
	public const int T=35;
	public const int UNICODE_ESC=36;
	public const int VAR=37;
	public const int WS=38;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;

	public NPortugolWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public NPortugolWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return NPortugolWalker.tokenNames; } }
	public override string GrammarFileName { get { return "E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g"; } }


		Emissor emitter = new Emissor();
		
		bool inExpression;
		
		public Dictionary<int, int> SourceMap { get { return emitter.SourceMap; } }
		
		public bool DebugInfo {get {return emitter.DebugInfo;} set{emitter.DebugInfo = value;} }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:8: public script returns [IList<string> scriptLines] : ( declare_function )* ;
	[GrammarRule("script")]
	public IList<string> script()
	{
		EnterRule_script();
		EnterRule("script", 1);
		TraceIn("script", 1);
		IList<string> scriptLines = default(IList<string>);


		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(25, 0);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:50: ( ( declare_function )* )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:52: ( declare_function )*
			{
			DebugLocation(25, 52);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:52: ( declare_function )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==FUNC))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:52: declare_function
					{
					DebugLocation(25, 52);
					PushFollow(Follow._declare_function_in_script62);
					declare_function();
					PopFollow();
					if (state.failed) return scriptLines;

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(26, 2);
			if (state.backtracking == 0)
			{
				 return emitter.ScriptLines;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("script", 1);
			LeaveRule("script", 1);
			LeaveRule_script();
		}
		DebugLocation(27, 0);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return scriptLines;

	}
	// $ANTLR end "script"

	partial void EnterRule_declare_function();
	partial void LeaveRule_declare_function();

	// $ANTLR start "declare_function"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:1: declare_function : ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) ) ;
	[GrammarRule("declare_function")]
	private void declare_function()
	{
		EnterRule_declare_function();
		EnterRule("declare_function", 2);
		TraceIn("declare_function", 2);
		CommonTree ID1 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "declare_function");
		DebugLocation(29, 0);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:18: ( ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:20: ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) )
			{
			DebugLocation(29, 20);
			DebugLocation(29, 22);
			Match(input,FUNC,Follow._FUNC_in_declare_function76); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(29, 27);
			ID1=(CommonTree)Match(input,ID,Follow._ID_in_declare_function78); if (state.failed) return;
			DebugLocation(29, 30);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:30: ( function_param_list )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==PARAM))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:30: function_param_list
					{
					DebugLocation(29, 30);
					PushFollow(Follow._function_param_list_in_declare_function80);
					function_param_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(29, 51);
			DebugLocation(29, 53);
			Match(input,SLIST,Follow._SLIST_in_declare_function84); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(29, 59);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:59: ( statement )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>=ASGN && LA3_0<=CALL)||LA3_0==JMP||LA3_0==LOOP||(LA3_0>=RET && LA3_0<=SJMP)||LA3_0==VAR))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:59: statement
						{
						DebugLocation(29, 59);
						PushFollow(Follow._statement_in_declare_function86);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(30, 2);
			if (state.backtracking == 0)
			{
				emitter.EmitFunction(ID1.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_function", 2);
			LeaveRule("declare_function", 2);
			LeaveRule_declare_function();
		}
		DebugLocation(31, 0);
		} finally { DebugExitRule(GrammarFileName, "declare_function"); }
		return;

	}
	// $ANTLR end "declare_function"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:33:1: statement : ( declare_local | if_stat | for_stat | function_call | assign_var | return_stat | asm_code );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(33, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:33:10: ( declare_local | if_stat | for_stat | function_call | assign_var | return_stat | asm_code )
			int alt4=7;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt4 = 1;
				}
				break;
			case JMP:
			case SJMP:
				{
				alt4 = 2;
				}
				break;
			case LOOP:
				{
				alt4 = 3;
				}
				break;
			case CALL:
				{
				alt4 = 4;
				}
				break;
			case ASGN:
				{
				alt4 = 5;
				}
				break;
			case RET:
				{
				alt4 = 6;
				}
				break;
			case ASM:
				{
				alt4 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:33:12: declare_local
				{
				DebugLocation(33, 12);
				PushFollow(Follow._declare_local_in_statement103);
				declare_local();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:34:4: if_stat
				{
				DebugLocation(34, 4);
				PushFollow(Follow._if_stat_in_statement108);
				if_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:35:4: for_stat
				{
				DebugLocation(35, 4);
				PushFollow(Follow._for_stat_in_statement114);
				for_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:36:4: function_call
				{
				DebugLocation(36, 4);
				PushFollow(Follow._function_call_in_statement119);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:37:4: assign_var
				{
				DebugLocation(37, 4);
				PushFollow(Follow._assign_var_in_statement125);
				assign_var();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:38:4: return_stat
				{
				DebugLocation(38, 4);
				PushFollow(Follow._return_stat_in_statement130);
				return_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:39:4: asm_code
				{
				DebugLocation(39, 4);
				PushFollow(Follow._asm_code_in_statement135);
				asm_code();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(40, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_function_param_list();
	partial void LeaveRule_function_param_list();

	// $ANTLR start "function_param_list"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:43:1: function_param_list : ^( PARAM (p+= ID )* ) ;
	[GrammarRule("function_param_list")]
	private void function_param_list()
	{
		EnterRule_function_param_list();
		EnterRule("function_param_list", 4);
		TraceIn("function_param_list", 4);
		CommonTree p = default(CommonTree);
		List<CommonTree> list_p = null;

		try { DebugEnterRule(GrammarFileName, "function_param_list");
		DebugLocation(43, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:44:2: ( ^( PARAM (p+= ID )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:44:5: ^( PARAM (p+= ID )* )
			{
			DebugLocation(44, 5);
			DebugLocation(44, 7);
			Match(input,PARAM,Follow._PARAM_in_function_param_list155); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(44, 14);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:44:14: (p+= ID )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==ID))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:44:14: p+= ID
						{
						DebugLocation(44, 14);
						p=(CommonTree)Match(input,ID,Follow._ID_in_function_param_list159); if (state.failed) return;
						if (list_p==null) list_p=new List<CommonTree>();
						list_p.Add(p);


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(44, 21);
			if (state.backtracking == 0)
			{
				 foreach(var item in list_p) emitter.AddParam(item.Text); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_param_list", 4);
			LeaveRule("function_param_list", 4);
			LeaveRule_function_param_list();
		}
		DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "function_param_list"); }
		return;

	}
	// $ANTLR end "function_param_list"

	partial void EnterRule_declare_local();
	partial void LeaveRule_declare_local();

	// $ANTLR start "declare_local"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:47:1: declare_local : ^( VAR (i+= ID )* ) ;
	[GrammarRule("declare_local")]
	private void declare_local()
	{
		EnterRule_declare_local();
		EnterRule("declare_local", 5);
		TraceIn("declare_local", 5);
		CommonTree i = default(CommonTree);
		List<CommonTree> list_i = null;

		try { DebugEnterRule(GrammarFileName, "declare_local");
		DebugLocation(47, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:48:2: ( ^( VAR (i+= ID )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:48:5: ^( VAR (i+= ID )* )
			{
			DebugLocation(48, 5);
			DebugLocation(48, 7);
			Match(input,VAR,Follow._VAR_in_declare_local178); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(48, 12);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:48:12: (i+= ID )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==ID))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:48:12: i+= ID
						{
						DebugLocation(48, 12);
						i=(CommonTree)Match(input,ID,Follow._ID_in_declare_local182); if (state.failed) return;
						if (list_i==null) list_i=new List<CommonTree>();
						list_i.Add(i);


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(48, 20);
			if (state.backtracking == 0)
			{
				 foreach(var item in list_i) emitter.EmitVar(item.Token); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_local", 5);
			LeaveRule("declare_local", 5);
			LeaveRule_declare_local();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_local"); }
		return;

	}
	// $ANTLR end "declare_local"

	partial void EnterRule_if_stat();
	partial void LeaveRule_if_stat();

	// $ANTLR start "if_stat"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:57:1: if_stat : ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) );
	[GrammarRule("if_stat")]
	private void if_stat()
	{
		EnterRule_if_stat();
		EnterRule("if_stat", 6);
		TraceIn("if_stat", 6);
		try { DebugEnterRule(GrammarFileName, "if_stat");
		DebugLocation(57, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:58:2: ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==SJMP))
			{
				alt9 = 1;
			}
			else if ((LA9_0==JMP))
			{
				alt9 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:58:5: ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) )
				{
				DebugLocation(58, 5);
				DebugLocation(58, 7);
				Match(input,SJMP,Follow._SJMP_in_if_stat202); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(58, 12);
				DebugLocation(58, 14);
				Match(input,LEXP,Follow._LEXP_in_if_stat205); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(58, 19);
				PushFollow(Follow._logic_expression_in_if_stat207);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(58, 37);
				DebugLocation(58, 39);
				Match(input,SLIST,Follow._SLIST_in_if_stat211); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(58, 45);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:58:45: ( statement )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>=ASGN && LA7_0<=CALL)||LA7_0==JMP||LA7_0==LOOP||(LA7_0>=RET && LA7_0<=SJMP)||LA7_0==VAR))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:58:45: statement
						{
						DebugLocation(58, 45);
						PushFollow(Follow._statement_in_if_stat213);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(58, 56);
				if (state.backtracking == 0)
				{
					emitter.EmitIf(true);
				}
				DebugLocation(58, 80);
				PushFollow(Follow._senao_stat_in_if_stat218);
				senao_stat();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:59:5: ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) )
				{
				DebugLocation(59, 5);
				DebugLocation(59, 7);
				Match(input,JMP,Follow._JMP_in_if_stat227); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(59, 11);
				DebugLocation(59, 13);
				Match(input,LEXP,Follow._LEXP_in_if_stat230); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(59, 18);
				PushFollow(Follow._logic_expression_in_if_stat232);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(59, 36);
				DebugLocation(59, 38);
				Match(input,SLIST,Follow._SLIST_in_if_stat236); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(59, 44);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:59:44: ( statement )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if (((LA8_0>=ASGN && LA8_0<=CALL)||LA8_0==JMP||LA8_0==LOOP||(LA8_0>=RET && LA8_0<=SJMP)||LA8_0==VAR))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:59:44: statement
							{
							DebugLocation(59, 44);
							PushFollow(Follow._statement_in_if_stat238);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(60, 2);
				if (state.backtracking == 0)
				{
					emitter.EmitIf(false);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("if_stat", 6);
			LeaveRule("if_stat", 6);
			LeaveRule_if_stat();
		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "if_stat"); }
		return;

	}
	// $ANTLR end "if_stat"

	partial void EnterRule_senao_stat();
	partial void LeaveRule_senao_stat();

	// $ANTLR start "senao_stat"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:63:1: senao_stat : ^( SLIST ( statement )* ) ;
	[GrammarRule("senao_stat")]
	private void senao_stat()
	{
		EnterRule_senao_stat();
		EnterRule("senao_stat", 7);
		TraceIn("senao_stat", 7);
		try { DebugEnterRule(GrammarFileName, "senao_stat");
		DebugLocation(63, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:64:2: ( ^( SLIST ( statement )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:64:4: ^( SLIST ( statement )* )
			{
			DebugLocation(64, 4);
			DebugLocation(64, 6);
			Match(input,SLIST,Follow._SLIST_in_senao_stat257); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(64, 12);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:64:12: ( statement )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if (((LA10_0>=ASGN && LA10_0<=CALL)||LA10_0==JMP||LA10_0==LOOP||(LA10_0>=RET && LA10_0<=SJMP)||LA10_0==VAR))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:64:12: statement
						{
						DebugLocation(64, 12);
						PushFollow(Follow._statement_in_senao_stat259);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(65, 5);
			if (state.backtracking == 0)
			{
				emitter.EmitElse();
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("senao_stat", 7);
			LeaveRule("senao_stat", 7);
			LeaveRule_senao_stat();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "senao_stat"); }
		return;

	}
	// $ANTLR end "senao_stat"

	partial void EnterRule_for_stat();
	partial void LeaveRule_for_stat();

	// $ANTLR start "for_stat"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:1: for_stat : ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) );
	[GrammarRule("for_stat")]
	private void for_stat()
	{
		EnterRule_for_stat();
		EnterRule("for_stat", 8);
		TraceIn("for_stat", 8);
		CommonTree i = default(CommonTree);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "for_stat");
		DebugLocation(69, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:3: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			int alt15=4;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==LOOP))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==DOWN))
				{
					int LA15_2 = input.LA(3);

					if ((LA15_2==DEC))
					{
						int LA15_3 = input.LA(4);

						if ((EvaluatePredicate(synpred19_NPortugolWalker_fragment)))
						{
							alt15 = 2;
						}
						else if ((true))
						{
							alt15 = 4;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 15, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA15_2==ASGN))
					{
						int LA15_4 = input.LA(4);

						if ((EvaluatePredicate(synpred17_NPortugolWalker_fragment)))
						{
							alt15 = 1;
						}
						else if ((EvaluatePredicate(synpred21_NPortugolWalker_fragment)))
						{
							alt15 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 15, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 15, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:3: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(70, 3);
				DebugLocation(70, 5);
				Match(input,LOOP,Follow._LOOP_in_for_stat283); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(70, 11);
				PushFollow(Follow._assign_var_in_for_stat287);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(70, 23);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(70, 50);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat293); if (state.failed) return;
				DebugLocation(70, 55);
				DebugLocation(70, 57);
				Match(input,SLIST,Follow._SLIST_in_for_stat296); if (state.failed) return;

				DebugLocation(70, 64);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, true);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(70, 103);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: ( statement )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if (((LA11_0>=ASGN && LA11_0<=CALL)||LA11_0==JMP||LA11_0==LOOP||(LA11_0>=RET && LA11_0<=SJMP)||LA11_0==VAR))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: statement
							{
							DebugLocation(70, 103);
							PushFollow(Follow._statement_in_for_stat301);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(70, 118);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, true);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(71, 4);
				DebugLocation(71, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat314); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(71, 11);
				Match(input,DEC,Follow._DEC_in_for_stat316); if (state.failed) return;
				DebugLocation(71, 16);
				PushFollow(Follow._assign_var_in_for_stat320);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(71, 28);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(71, 55);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat326); if (state.failed) return;
				DebugLocation(71, 60);
				DebugLocation(71, 62);
				Match(input,SLIST,Follow._SLIST_in_for_stat329); if (state.failed) return;

				DebugLocation(71, 68);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, false);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(71, 108);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:108: ( statement )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if (((LA12_0>=ASGN && LA12_0<=CALL)||LA12_0==JMP||LA12_0==LOOP||(LA12_0>=RET && LA12_0<=SJMP)||LA12_0==VAR))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:108: statement
							{
							DebugLocation(71, 108);
							PushFollow(Follow._statement_in_for_stat333);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(71, 122);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, false);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:72:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(72, 4);
				DebugLocation(72, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat345); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(72, 12);
				PushFollow(Follow._assign_var_in_for_stat349);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(72, 24);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(72, 51);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat355); if (state.failed) return;
				DebugLocation(72, 55);
				DebugLocation(72, 57);
				Match(input,SLIST,Follow._SLIST_in_for_stat358); if (state.failed) return;

				DebugLocation(72, 64);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, true);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(72, 103);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:72:103: ( statement )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if (((LA13_0>=ASGN && LA13_0<=CALL)||LA13_0==JMP||LA13_0==LOOP||(LA13_0>=RET && LA13_0<=SJMP)||LA13_0==VAR))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:72:103: statement
							{
							DebugLocation(72, 103);
							PushFollow(Follow._statement_in_for_stat363);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(72, 118);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, true);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:73:4: ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(73, 4);
				DebugLocation(73, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat376); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(73, 11);
				Match(input,DEC,Follow._DEC_in_for_stat378); if (state.failed) return;
				DebugLocation(73, 16);
				PushFollow(Follow._assign_var_in_for_stat382);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(73, 28);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(73, 55);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat388); if (state.failed) return;
				DebugLocation(73, 59);
				DebugLocation(73, 61);
				Match(input,SLIST,Follow._SLIST_in_for_stat391); if (state.failed) return;

				DebugLocation(73, 67);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, false);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(73, 107);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:73:107: ( statement )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if (((LA14_0>=ASGN && LA14_0<=CALL)||LA14_0==JMP||LA14_0==LOOP||(LA14_0>=RET && LA14_0<=SJMP)||LA14_0==VAR))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:73:107: statement
							{
							DebugLocation(73, 107);
							PushFollow(Follow._statement_in_for_stat395);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(73, 121);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, false);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_stat", 8);
			LeaveRule("for_stat", 8);
			LeaveRule_for_stat();
		}
		DebugLocation(74, 1);
		} finally { DebugExitRule(GrammarFileName, "for_stat"); }
		return;

	}
	// $ANTLR end "for_stat"

	partial void EnterRule_function_call();
	partial void LeaveRule_function_call();

	// $ANTLR start "function_call"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:87:1: function_call : ^( CALL ID ( function_arg_list )* ) ;
	[GrammarRule("function_call")]
	private void function_call()
	{
		EnterRule_function_call();
		EnterRule("function_call", 9);
		TraceIn("function_call", 9);
		CommonTree ID2 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "function_call");
		DebugLocation(87, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:88:2: ( ^( CALL ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:88:5: ^( CALL ID ( function_arg_list )* )
			{
			DebugLocation(88, 5);
			DebugLocation(88, 7);
			Match(input,CALL,Follow._CALL_in_function_call424); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(88, 12);
			ID2=(CommonTree)Match(input,ID,Follow._ID_in_function_call426); if (state.failed) return;
			DebugLocation(88, 15);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:88:15: ( function_arg_list )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==ARG))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:88:15: function_arg_list
					{
					DebugLocation(88, 15);
					PushFollow(Follow._function_arg_list_in_function_call428);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(89, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitCall(ID2.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_call", 9);
			LeaveRule("function_call", 9);
			LeaveRule_function_call();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "function_call"); }
		return;

	}
	// $ANTLR end "function_call"

	partial void EnterRule_property_call();
	partial void LeaveRule_property_call();

	// $ANTLR start "property_call"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:92:1: property_call : ^( PCALL o= ID p= ID ) ;
	[GrammarRule("property_call")]
	private void property_call()
	{
		EnterRule_property_call();
		EnterRule("property_call", 10);
		TraceIn("property_call", 10);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "property_call");
		DebugLocation(92, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:93:2: ( ^( PCALL o= ID p= ID ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:93:5: ^( PCALL o= ID p= ID )
			{
			DebugLocation(93, 5);
			DebugLocation(93, 7);
			Match(input,PCALL,Follow._PCALL_in_property_call449); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(93, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_property_call453); if (state.failed) return;
			DebugLocation(93, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_property_call457); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(94, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitPropCall(o.Token, p.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("property_call", 10);
			LeaveRule("property_call", 10);
			LeaveRule_property_call();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "property_call"); }
		return;

	}
	// $ANTLR end "property_call"

	partial void EnterRule_method_call();
	partial void LeaveRule_method_call();

	// $ANTLR start "method_call"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:97:1: method_call : ^( MCALL o= ID p= ID ( function_arg_list )* ) ;
	[GrammarRule("method_call")]
	private void method_call()
	{
		EnterRule_method_call();
		EnterRule("method_call", 11);
		TraceIn("method_call", 11);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "method_call");
		DebugLocation(97, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:98:2: ( ^( MCALL o= ID p= ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:98:5: ^( MCALL o= ID p= ID ( function_arg_list )* )
			{
			DebugLocation(98, 5);
			DebugLocation(98, 7);
			Match(input,MCALL,Follow._MCALL_in_method_call482); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(98, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_method_call486); if (state.failed) return;
			DebugLocation(98, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_method_call490); if (state.failed) return;
			DebugLocation(98, 23);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:98:23: ( function_arg_list )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==ARG))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:98:23: function_arg_list
					{
					DebugLocation(98, 23);
					PushFollow(Follow._function_arg_list_in_method_call492);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(99, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitMethodCall(o.Token, p.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("method_call", 11);
			LeaveRule("method_call", 11);
			LeaveRule_method_call();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "method_call"); }
		return;

	}
	// $ANTLR end "method_call"

	partial void EnterRule_function_arg_list();
	partial void LeaveRule_function_arg_list();

	// $ANTLR start "function_arg_list"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:102:1: function_arg_list : ^( ARG ( plus_expression )* ) ;
	[GrammarRule("function_arg_list")]
	private void function_arg_list()
	{
		EnterRule_function_arg_list();
		EnterRule("function_arg_list", 12);
		TraceIn("function_arg_list", 12);
		try { DebugEnterRule(GrammarFileName, "function_arg_list");
		DebugLocation(102, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:104:2: ( ^( ARG ( plus_expression )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:104:4: ^( ARG ( plus_expression )* )
			{
			DebugLocation(104, 4);
			DebugLocation(104, 6);
			Match(input,ARG,Follow._ARG_in_function_arg_list519); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(104, 10);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:104:10: ( plus_expression )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==CALL||(LA18_0>=F && LA18_0<=FLOAT)||LA18_0==ID||LA18_0==INDEX||LA18_0==INT||LA18_0==MCALL||LA18_0==PCALL||(LA18_0>=STRING && LA18_0<=T)||LA18_0==41||(LA18_0>=44 && LA18_0<=45)||LA18_0==47||LA18_0==50))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:104:10: plus_expression
						{
						DebugLocation(104, 10);
						PushFollow(Follow._plus_expression_in_function_arg_list521);
						plus_expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_arg_list", 12);
			LeaveRule("function_arg_list", 12);
			LeaveRule_function_arg_list();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "function_arg_list"); }
		return;

	}
	// $ANTLR end "function_arg_list"

	partial void EnterRule_asm_code();
	partial void LeaveRule_asm_code();

	// $ANTLR start "asm_code"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:1: asm_code : ^( ASM (s+= STRING )* ) ;
	[GrammarRule("asm_code")]
	private void asm_code()
	{
		EnterRule_asm_code();
		EnterRule("asm_code", 13);
		TraceIn("asm_code", 13);
		CommonTree s = default(CommonTree);
		List<CommonTree> list_s = null;

		try { DebugEnterRule(GrammarFileName, "asm_code");
		DebugLocation(108, 8);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:9: ( ^( ASM (s+= STRING )* ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:11: ^( ASM (s+= STRING )* )
			{
			DebugLocation(108, 11);
			DebugLocation(108, 13);
			Match(input,ASM,Follow._ASM_in_asm_code537); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(108, 18);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:18: (s+= STRING )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==STRING))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:18: s+= STRING
						{
						DebugLocation(108, 18);
						s=(CommonTree)Match(input,STRING,Follow._STRING_in_asm_code541); if (state.failed) return;
						if (list_s==null) list_s=new List<CommonTree>();
						list_s.Add(s);


						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(109, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitAsmCode(list_s);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("asm_code", 13);
			LeaveRule("asm_code", 13);
			LeaveRule_asm_code();
		}
		DebugLocation(110, 8);
		} finally { DebugExitRule(GrammarFileName, "asm_code"); }
		return;

	}
	// $ANTLR end "asm_code"

	partial void EnterRule_assign_var();
	partial void LeaveRule_assign_var();

	// $ANTLR start "assign_var"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:113:1: assign_var returns [string id] : ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) );
	[GrammarRule("assign_var")]
	private string assign_var()
	{
		EnterRule_assign_var();
		EnterRule("assign_var", 14);
		TraceIn("assign_var", 14);
		string id = default(string);


		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);
		CommonTree ID3 = default(CommonTree);
		CommonTree ID4 = default(CommonTree);
		CommonTree INT5 = default(CommonTree);
		CommonTree ID6 = default(CommonTree);
		CommonTree ID7 = default(CommonTree);
		CommonTree ID8 = default(CommonTree);
		CommonTree ID9 = default(CommonTree);
		CommonTree ID10 = default(CommonTree);
		CommonTree ID11 = default(CommonTree);
		object a = default(object);

		try { DebugEnterRule(GrammarFileName, "assign_var");
		DebugLocation(113, 4);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:114:5: ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) )
			int alt21=9;
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==ASGN))
			{
				int LA21_1 = input.LA(2);

				if ((LA21_1==DOWN))
				{
					int LA21_2 = input.LA(3);

					if ((LA21_2==ID))
					{
						int LA21_3 = input.LA(4);

						if ((EvaluatePredicate(synpred27_NPortugolWalker_fragment)))
						{
							alt21 = 1;
						}
						else if ((EvaluatePredicate(synpred30_NPortugolWalker_fragment)))
						{
							alt21 = 4;
						}
						else if ((EvaluatePredicate(synpred31_NPortugolWalker_fragment)))
						{
							alt21 = 5;
						}
						else if ((EvaluatePredicate(synpred32_NPortugolWalker_fragment)))
						{
							alt21 = 6;
						}
						else if ((EvaluatePredicate(synpred33_NPortugolWalker_fragment)))
						{
							alt21 = 7;
						}
						else if ((EvaluatePredicate(synpred34_NPortugolWalker_fragment)))
						{
							alt21 = 8;
						}
						else if ((true))
						{
							alt21 = 9;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 21, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA21_2==AR))
					{
						int LA21_4 = input.LA(4);

						if ((EvaluatePredicate(synpred28_NPortugolWalker_fragment)))
						{
							alt21 = 2;
						}
						else if ((EvaluatePredicate(synpred29_NPortugolWalker_fragment)))
						{
							alt21 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 21, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return id;}
						NoViableAltException nvae = new NoViableAltException("", 21, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return id;}
					NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return id;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:7: ^( ASGN ID a= atom )
				{
				DebugLocation(115, 7);
				DebugLocation(115, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var582); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(115, 14);
				ID3=(CommonTree)Match(input,ID,Follow._ID_in_assign_var584); if (state.failed) return id;
				DebugLocation(115, 18);
				PushFollow(Follow._atom_in_assign_var588);
				a=atom();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(115, 25);
				if (state.backtracking == 0)
				{
					id = (ID3!=null?ID3.Text:null); emitter.EmitAssign(ID3.Token, a);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:116:7: ^( ASGN ^( AR INT ) ID plus_expression )
				{
				DebugLocation(116, 7);
				DebugLocation(116, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var600); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(116, 14);
				DebugLocation(116, 16);
				Match(input,AR,Follow._AR_in_assign_var603); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(116, 19);
				INT5=(CommonTree)Match(input,INT,Follow._INT_in_assign_var605); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(116, 24);
				ID4=(CommonTree)Match(input,ID,Follow._ID_in_assign_var608); if (state.failed) return id;
				DebugLocation(116, 27);
				PushFollow(Follow._plus_expression_in_assign_var610);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(116, 44);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(ID4.Token, int.Parse((INT5!=null?INT5.Text:null)));
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:117:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
				{
				DebugLocation(117, 7);
				DebugLocation(117, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var628); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(117, 14);
				DebugLocation(117, 16);
				Match(input,AR,Follow._AR_in_assign_var631); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(117, 20);
				i=(CommonTree)Match(input,ID,Follow._ID_in_assign_var635); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(117, 26);
				p=(CommonTree)Match(input,ID,Follow._ID_in_assign_var640); if (state.failed) return id;
				DebugLocation(117, 30);
				PushFollow(Follow._plus_expression_in_assign_var642);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(117, 47);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(p.Token, (i!=null?i.Text:null));
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:118:7: ^( ASGN ID plus_expression )
				{
				DebugLocation(118, 7);
				DebugLocation(118, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var664); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(118, 14);
				ID6=(CommonTree)Match(input,ID,Follow._ID_in_assign_var666); if (state.failed) return id;
				DebugLocation(118, 17);
				PushFollow(Follow._plus_expression_in_assign_var668);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(118, 34);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(ID6.Token);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:119:7: ^( ASGN ID 'nulo' )
				{
				DebugLocation(119, 7);
				DebugLocation(119, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var681); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(119, 14);
				ID7=(CommonTree)Match(input,ID,Follow._ID_in_assign_var683); if (state.failed) return id;
				DebugLocation(119, 17);
				Match(input,76,Follow._76_in_assign_var685); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(119, 25);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID7.Token, null);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:120:7: ^( ASGN ID 'falso' )
				{
				DebugLocation(120, 7);
				DebugLocation(120, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var698); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(120, 14);
				ID8=(CommonTree)Match(input,ID,Follow._ID_in_assign_var700); if (state.failed) return id;
				DebugLocation(120, 17);
				Match(input,75,Follow._75_in_assign_var702); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(120, 26);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID8.Token, false);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:121:7: ^( ASGN ID 'verdadeiro' )
				{
				DebugLocation(121, 7);
				DebugLocation(121, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var715); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(121, 14);
				ID9=(CommonTree)Match(input,ID,Follow._ID_in_assign_var717); if (state.failed) return id;
				DebugLocation(121, 17);
				Match(input,77,Follow._77_in_assign_var719); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(121, 31);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID9.Token, true);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:122:7: ^( ASGN ID l= INT r= INT )
				{
				DebugLocation(122, 7);
				DebugLocation(122, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var740); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(122, 14);
				ID10=(CommonTree)Match(input,ID,Follow._ID_in_assign_var742); if (state.failed) return id;
				DebugLocation(122, 18);
				l=(CommonTree)Match(input,INT,Follow._INT_in_assign_var746); if (state.failed) return id;
				DebugLocation(122, 24);
				r=(CommonTree)Match(input,INT,Follow._INT_in_assign_var750); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(122, 30);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID10.Token, int.Parse((l!=null?l.Text:null)), int.Parse((r!=null?r.Text:null)));
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:123:7: ^( ASGN ID ^( ILIST (i= INT )* ) )
				{
				DebugLocation(123, 7);
				DebugLocation(123, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var762); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(123, 14);
				ID11=(CommonTree)Match(input,ID,Follow._ID_in_assign_var764); if (state.failed) return id;
				DebugLocation(123, 17);
				DebugLocation(123, 19);
				Match(input,ILIST,Follow._ILIST_in_assign_var767); if (state.failed) return id;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return id;
					DebugLocation(123, 26);
					// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:123:26: (i= INT )*
					try { DebugEnterSubRule(20);
					while (true)
					{
						int alt20=2;
						try { DebugEnterDecision(20, false);
						int LA20_0 = input.LA(1);

						if ((LA20_0==INT))
						{
							alt20 = 1;
						}


						} finally { DebugExitDecision(20); }
						switch ( alt20 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:123:26: i= INT
							{
							DebugLocation(123, 26);
							i=(CommonTree)Match(input,INT,Follow._INT_in_assign_var771); if (state.failed) return id;

							}
							break;

						default:
							goto loop20;
						}
					}

					loop20:
						;

					} finally { DebugExitSubRule(20); }


					Match(input, TokenTypes.Up, null); if (state.failed) return id;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(123, 34);
				if (state.backtracking == 0)
				{
					emitter.EmitAssignArray(ID11.Token, i);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assign_var", 14);
			LeaveRule("assign_var", 14);
			LeaveRule_assign_var();
		}
		DebugLocation(124, 4);
		} finally { DebugExitRule(GrammarFileName, "assign_var"); }
		return id;

	}
	// $ANTLR end "assign_var"

	partial void EnterRule_return_stat();
	partial void LeaveRule_return_stat();

	// $ANTLR start "return_stat"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:126:1: return_stat : ^( RET plus_expression ) ;
	[GrammarRule("return_stat")]
	private void return_stat()
	{
		EnterRule_return_stat();
		EnterRule("return_stat", 15);
		TraceIn("return_stat", 15);
		CommonTree RET12 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "return_stat");
		DebugLocation(126, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:127:2: ( ^( RET plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:127:5: ^( RET plus_expression )
			{
			DebugLocation(127, 5);
			DebugLocation(127, 7);
			RET12=(CommonTree)Match(input,RET,Follow._RET_in_return_stat794); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(127, 11);
			PushFollow(Follow._plus_expression_in_return_stat796);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(127, 27);
			if (state.backtracking == 0)
			{
				emitter.EmitRet(RET12.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("return_stat", 15);
			LeaveRule("return_stat", 15);
			LeaveRule_return_stat();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "return_stat"); }
		return;

	}
	// $ANTLR end "return_stat"

	partial void EnterRule_plus_expression();
	partial void LeaveRule_plus_expression();

	// $ANTLR start "plus_expression"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:132:1: plus_expression : ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( '%' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom );
	[GrammarRule("plus_expression")]
	private void plus_expression()
	{
		EnterRule_plus_expression();
		EnterRule("plus_expression", 16);
		TraceIn("plus_expression", 16);
		CommonTree i2 = default(CommonTree);
		CommonTree i1 = default(CommonTree);
		CommonTree ID13 = default(CommonTree);
		CommonTree INT14 = default(CommonTree);

		 inExpression = true; 
		try { DebugEnterRule(GrammarFileName, "plus_expression");
		DebugLocation(132, 0);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:135:3: ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( '%' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom )
			int alt22=11;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case 45:
				{
				alt22 = 1;
				}
				break;
			case 47:
				{
				alt22 = 2;
				}
				break;
			case 44:
				{
				alt22 = 3;
				}
				break;
			case 50:
				{
				alt22 = 4;
				}
				break;
			case 41:
				{
				alt22 = 5;
				}
				break;
			case INDEX:
				{
				int LA22_6 = input.LA(2);

				if ((LA22_6==DOWN))
				{
					int LA22_16 = input.LA(3);

					if ((LA22_16==INT))
					{
						alt22 = 6;
					}
					else if ((LA22_16==ID))
					{
						alt22 = 7;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 22, 16, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 22, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CALL:
				{
				alt22 = 8;
				}
				break;
			case MCALL:
				{
				alt22 = 9;
				}
				break;
			case PCALL:
				{
				alt22 = 10;
				}
				break;
			case F:
			case FLOAT:
			case ID:
			case INT:
			case STRING:
			case T:
				{
				alt22 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:135:3: ^( '+' plus_expression plus_expression )
				{
				DebugLocation(135, 3);
				DebugLocation(135, 5);
				Match(input,45,Follow._45_in_plus_expression821); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(135, 9);
				PushFollow(Follow._plus_expression_in_plus_expression823);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(135, 25);
				PushFollow(Follow._plus_expression_in_plus_expression825);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(135, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackAdd();
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:136:3: ^( '-' plus_expression plus_expression )
				{
				DebugLocation(136, 3);
				DebugLocation(136, 5);
				Match(input,47,Follow._47_in_plus_expression833); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(136, 9);
				PushFollow(Follow._plus_expression_in_plus_expression835);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(136, 25);
				PushFollow(Follow._plus_expression_in_plus_expression837);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(136, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackSub();
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:137:3: ^( '*' plus_expression plus_expression )
				{
				DebugLocation(137, 3);
				DebugLocation(137, 5);
				Match(input,44,Follow._44_in_plus_expression845); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(137, 9);
				PushFollow(Follow._plus_expression_in_plus_expression847);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(137, 25);
				PushFollow(Follow._plus_expression_in_plus_expression849);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(137, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackPlus();
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:138:3: ^( '/' plus_expression plus_expression )
				{
				DebugLocation(138, 3);
				DebugLocation(138, 5);
				Match(input,50,Follow._50_in_plus_expression857); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(138, 9);
				PushFollow(Follow._plus_expression_in_plus_expression859);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(138, 25);
				PushFollow(Follow._plus_expression_in_plus_expression861);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(138, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackDiv();
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:139:3: ^( '%' plus_expression plus_expression )
				{
				DebugLocation(139, 3);
				DebugLocation(139, 5);
				Match(input,41,Follow._41_in_plus_expression869); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(139, 9);
				PushFollow(Follow._plus_expression_in_plus_expression871);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(139, 25);
				PushFollow(Follow._plus_expression_in_plus_expression873);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(139, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackMod();
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:140:3: ^( INDEX INT ) ID
				{
				DebugLocation(140, 3);
				DebugLocation(140, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression881); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(140, 11);
				INT14=(CommonTree)Match(input,INT,Follow._INT_in_plus_expression883); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(140, 16);
				ID13=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression886); if (state.failed) return;
				DebugLocation(140, 19);
				if (state.backtracking == 0)
				{
					emitter.EmitPush((ID13!=null?ID13.Text:null), int.Parse((INT14!=null?INT14.Text:null)));
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:141:3: ^( INDEX i2= ID ) i1= ID
				{
				DebugLocation(141, 3);
				DebugLocation(141, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression893); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(141, 13);
				i2=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression897); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(141, 20);
				i1=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression902); if (state.failed) return;
				DebugLocation(141, 24);
				if (state.backtracking == 0)
				{
					emitter.EmitPush((i1!=null?i1.Text:null), (i2!=null?i2.Text:null));
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:142:3: function_call
				{
				DebugLocation(142, 3);
				PushFollow(Follow._function_call_in_plus_expression908);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:143:3: method_call
				{
				DebugLocation(143, 3);
				PushFollow(Follow._method_call_in_plus_expression912);
				method_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:144:3: property_call
				{
				DebugLocation(144, 3);
				PushFollow(Follow._property_call_in_plus_expression916);
				property_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:145:3: atom
				{
				DebugLocation(145, 3);
				PushFollow(Follow._atom_in_plus_expression920);
				atom();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			if (state.backtracking == 0)
			{
				 inExpression = false; 
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("plus_expression", 16);
			LeaveRule("plus_expression", 16);
			LeaveRule_plus_expression();
		}
		DebugLocation(146, 0);
		} finally { DebugExitRule(GrammarFileName, "plus_expression"); }
		return;

	}
	// $ANTLR end "plus_expression"

	partial void EnterRule_logic_expression();
	partial void LeaveRule_logic_expression();

	// $ANTLR start "logic_expression"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:148:1: logic_expression : ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression );
	[GrammarRule("logic_expression")]
	private void logic_expression()
	{
		EnterRule_logic_expression();
		EnterRule("logic_expression", 17);
		TraceIn("logic_expression", 17);
		try { DebugEnterRule(GrammarFileName, "logic_expression");
		DebugLocation(148, 1);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:149:2: ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression )
			int alt23=9;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case 51:
				{
				alt23 = 1;
				}
				break;
			case 55:
				{
				alt23 = 2;
				}
				break;
			case 52:
				{
				alt23 = 3;
				}
				break;
			case 56:
				{
				alt23 = 4;
				}
				break;
			case 54:
				{
				alt23 = 5;
				}
				break;
			case 39:
				{
				alt23 = 6;
				}
				break;
			case 61:
				{
				alt23 = 7;
				}
				break;
			case 66:
				{
				alt23 = 8;
				}
				break;
			case CALL:
			case F:
			case FLOAT:
			case ID:
			case INDEX:
			case INT:
			case MCALL:
			case PCALL:
			case STRING:
			case T:
			case 41:
			case 44:
			case 45:
			case 47:
			case 50:
				{
				alt23 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:149:6: ^( '<' plus_expression plus_expression )
				{
				DebugLocation(149, 6);
				DebugLocation(149, 8);
				Match(input,51,Follow._51_in_logic_expression933); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(149, 12);
				PushFollow(Follow._plus_expression_in_logic_expression935);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(149, 28);
				PushFollow(Follow._plus_expression_in_logic_expression937);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(149, 45);
				if (state.backtracking == 0)
				{
					emitter.EmitLessExp();
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:150:6: ^( '>' plus_expression plus_expression )
				{
				DebugLocation(150, 6);
				DebugLocation(150, 8);
				Match(input,55,Follow._55_in_logic_expression948); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(150, 12);
				PushFollow(Follow._plus_expression_in_logic_expression950);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(150, 28);
				PushFollow(Follow._plus_expression_in_logic_expression952);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(150, 45);
				if (state.backtracking == 0)
				{
					emitter.EmitGreaterExp();
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:151:6: ^( '<=' plus_expression plus_expression )
				{
				DebugLocation(151, 6);
				DebugLocation(151, 8);
				Match(input,52,Follow._52_in_logic_expression963); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(151, 13);
				PushFollow(Follow._plus_expression_in_logic_expression965);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(151, 29);
				PushFollow(Follow._plus_expression_in_logic_expression967);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(151, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitLessEqExp();
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:152:6: ^( '>=' plus_expression plus_expression )
				{
				DebugLocation(152, 6);
				DebugLocation(152, 8);
				Match(input,56,Follow._56_in_logic_expression978); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(152, 13);
				PushFollow(Follow._plus_expression_in_logic_expression980);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(152, 29);
				PushFollow(Follow._plus_expression_in_logic_expression982);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(152, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitGreaterEqExp();
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:153:6: ^( '==' plus_expression plus_expression )
				{
				DebugLocation(153, 6);
				DebugLocation(153, 8);
				Match(input,54,Follow._54_in_logic_expression993); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(153, 13);
				PushFollow(Follow._plus_expression_in_logic_expression995);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(153, 29);
				PushFollow(Follow._plus_expression_in_logic_expression997);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(153, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitEqualsExp();
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:154:6: ^( '!=' plus_expression plus_expression )
				{
				DebugLocation(154, 6);
				DebugLocation(154, 8);
				Match(input,39,Follow._39_in_logic_expression1008); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(154, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1010);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(154, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1012);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(154, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitNotEqExp();
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:155:6: ^( 'e' plus_expression plus_expression )
				{
				DebugLocation(155, 6);
				DebugLocation(155, 8);
				Match(input,61,Follow._61_in_logic_expression1023); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(155, 12);
				PushFollow(Follow._plus_expression_in_logic_expression1025);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(155, 28);
				PushFollow(Follow._plus_expression_in_logic_expression1027);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:156:6: ^( 'ou' plus_expression plus_expression )
				{
				DebugLocation(156, 6);
				DebugLocation(156, 8);
				Match(input,66,Follow._66_in_logic_expression1036); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(156, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1038);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(156, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1040);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:157:4: plus_expression
				{
				DebugLocation(157, 4);
				PushFollow(Follow._plus_expression_in_logic_expression1052);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logic_expression", 17);
			LeaveRule("logic_expression", 17);
			LeaveRule_logic_expression();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expression"); }
		return;

	}
	// $ANTLR end "logic_expression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();

	// $ANTLR start "atom"
	// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:162:1: atom returns [object value] : (a= ID |a= INT |a= FLOAT |a= STRING |a= T |a= F );
	[GrammarRule("atom")]
	private object atom()
	{
		EnterRule_atom();
		EnterRule("atom", 18);
		TraceIn("atom", 18);
		object value = default(object);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(162, 4);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:162:27: (a= ID |a= INT |a= FLOAT |a= STRING |a= T |a= F )
			int alt24=6;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt24 = 1;
				}
				break;
			case INT:
				{
				alt24 = 2;
				}
				break;
			case FLOAT:
				{
				alt24 = 3;
				}
				break;
			case STRING:
				{
				alt24 = 4;
				}
				break;
			case T:
				{
				alt24 = 5;
				}
				break;
			case F:
				{
				alt24 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:163:7: a= ID
				{
				DebugLocation(163, 8);
				a=(CommonTree)Match(input,ID,Follow._ID_in_atom1080); if (state.failed) return value;
				DebugLocation(163, 12);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null); emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:164:7: a= INT
				{
				DebugLocation(164, 8);
				a=(CommonTree)Match(input,INT,Follow._INT_in_atom1092); if (state.failed) return value;
				DebugLocation(164, 12);
				if (state.backtracking == 0)
				{
					value = int.Parse((a!=null?a.Text:null));  emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:165:7: a= FLOAT
				{
				DebugLocation(165, 8);
				a=(CommonTree)Match(input,FLOAT,Follow._FLOAT_in_atom1103); if (state.failed) return value;
				DebugLocation(165, 14);
				if (state.backtracking == 0)
				{
					value = float.Parse((a!=null?a.Text:null));  emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:166:7: a= STRING
				{
				DebugLocation(166, 8);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_atom1114); if (state.failed) return value;
				DebugLocation(166, 15);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null);  emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:167:7: a= T
				{
				DebugLocation(167, 8);
				a=(CommonTree)Match(input,T,Follow._T_in_atom1125); if (state.failed) return value;
				DebugLocation(167, 10);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null);  emitter.EmitPush(true, a.Token);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:168:7: a= F
				{
				DebugLocation(168, 8);
				a=(CommonTree)Match(input,F,Follow._F_in_atom1140); if (state.failed) return value;
				DebugLocation(168, 10);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null);  emitter.EmitPush(false, a.Token);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 18);
			LeaveRule("atom", 18);
			LeaveRule_atom();
		}
		DebugLocation(169, 4);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return value;

	}
	// $ANTLR end "atom"

	partial void EnterRule_synpred17_NPortugolWalker_fragment();
	partial void LeaveRule_synpred17_NPortugolWalker_fragment();

	// $ANTLR start synpred17_NPortugolWalker
	public void synpred17_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred17_NPortugolWalker_fragment();
		EnterRule("synpred17_NPortugolWalker_fragment", 35);
		TraceIn("synpred17_NPortugolWalker_fragment", 35);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:3: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:3: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(70, 3);
			DebugLocation(70, 5);
			Match(input,LOOP,Follow._LOOP_in_synpred17_NPortugolWalker283); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(70, 11);
			PushFollow(Follow._assign_var_in_synpred17_NPortugolWalker287);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(70, 50);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred17_NPortugolWalker293); if (state.failed) return;
			DebugLocation(70, 55);
			DebugLocation(70, 57);
			Match(input,SLIST,Follow._SLIST_in_synpred17_NPortugolWalker296); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(70, 103);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: ( statement )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if (((LA26_0>=ASGN && LA26_0<=CALL)||LA26_0==JMP||LA26_0==LOOP||(LA26_0>=RET && LA26_0<=SJMP)||LA26_0==VAR))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: statement
						{
						DebugLocation(70, 103);
						PushFollow(Follow._statement_in_synpred17_NPortugolWalker301);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred17_NPortugolWalker_fragment", 35);
			LeaveRule("synpred17_NPortugolWalker_fragment", 35);
			LeaveRule_synpred17_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred17_NPortugolWalker

	partial void EnterRule_synpred19_NPortugolWalker_fragment();
	partial void LeaveRule_synpred19_NPortugolWalker_fragment();

	// $ANTLR start synpred19_NPortugolWalker
	public void synpred19_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred19_NPortugolWalker_fragment();
		EnterRule("synpred19_NPortugolWalker_fragment", 37);
		TraceIn("synpred19_NPortugolWalker_fragment", 37);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:4: ( ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(71, 4);
			DebugLocation(71, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred19_NPortugolWalker314); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(71, 11);
			Match(input,DEC,Follow._DEC_in_synpred19_NPortugolWalker316); if (state.failed) return;
			DebugLocation(71, 16);
			PushFollow(Follow._assign_var_in_synpred19_NPortugolWalker320);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(71, 55);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred19_NPortugolWalker326); if (state.failed) return;
			DebugLocation(71, 60);
			DebugLocation(71, 62);
			Match(input,SLIST,Follow._SLIST_in_synpred19_NPortugolWalker329); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(71, 108);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:108: ( statement )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if (((LA27_0>=ASGN && LA27_0<=CALL)||LA27_0==JMP||LA27_0==LOOP||(LA27_0>=RET && LA27_0<=SJMP)||LA27_0==VAR))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:108: statement
						{
						DebugLocation(71, 108);
						PushFollow(Follow._statement_in_synpred19_NPortugolWalker333);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred19_NPortugolWalker_fragment", 37);
			LeaveRule("synpred19_NPortugolWalker_fragment", 37);
			LeaveRule_synpred19_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred19_NPortugolWalker

	partial void EnterRule_synpred21_NPortugolWalker_fragment();
	partial void LeaveRule_synpred21_NPortugolWalker_fragment();

	// $ANTLR start synpred21_NPortugolWalker
	public void synpred21_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred21_NPortugolWalker_fragment();
		EnterRule("synpred21_NPortugolWalker_fragment", 39);
		TraceIn("synpred21_NPortugolWalker_fragment", 39);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:72:4: ( ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:72:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
			{
			DebugLocation(72, 4);
			DebugLocation(72, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred21_NPortugolWalker345); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(72, 12);
			PushFollow(Follow._assign_var_in_synpred21_NPortugolWalker349);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(72, 51);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred21_NPortugolWalker355); if (state.failed) return;
			DebugLocation(72, 55);
			DebugLocation(72, 57);
			Match(input,SLIST,Follow._SLIST_in_synpred21_NPortugolWalker358); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(72, 103);
				// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:72:103: ( statement )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if (((LA28_0>=ASGN && LA28_0<=CALL)||LA28_0==JMP||LA28_0==LOOP||(LA28_0>=RET && LA28_0<=SJMP)||LA28_0==VAR))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:72:103: statement
						{
						DebugLocation(72, 103);
						PushFollow(Follow._statement_in_synpred21_NPortugolWalker363);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred21_NPortugolWalker_fragment", 39);
			LeaveRule("synpred21_NPortugolWalker_fragment", 39);
			LeaveRule_synpred21_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred21_NPortugolWalker

	partial void EnterRule_synpred27_NPortugolWalker_fragment();
	partial void LeaveRule_synpred27_NPortugolWalker_fragment();

	// $ANTLR start synpred27_NPortugolWalker
	public void synpred27_NPortugolWalker_fragment()
	{
		object a = default(object);

		EnterRule_synpred27_NPortugolWalker_fragment();
		EnterRule("synpred27_NPortugolWalker_fragment", 45);
		TraceIn("synpred27_NPortugolWalker_fragment", 45);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:7: ( ^( ASGN ID a= atom ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:7: ^( ASGN ID a= atom )
			{
			DebugLocation(115, 7);
			DebugLocation(115, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred27_NPortugolWalker582); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(115, 14);
			Match(input,ID,Follow._ID_in_synpred27_NPortugolWalker584); if (state.failed) return;
			DebugLocation(115, 18);
			PushFollow(Follow._atom_in_synpred27_NPortugolWalker588);
			a=atom();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred27_NPortugolWalker_fragment", 45);
			LeaveRule("synpred27_NPortugolWalker_fragment", 45);
			LeaveRule_synpred27_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred27_NPortugolWalker

	partial void EnterRule_synpred28_NPortugolWalker_fragment();
	partial void LeaveRule_synpred28_NPortugolWalker_fragment();

	// $ANTLR start synpred28_NPortugolWalker
	public void synpred28_NPortugolWalker_fragment()
	{
		EnterRule_synpred28_NPortugolWalker_fragment();
		EnterRule("synpred28_NPortugolWalker_fragment", 46);
		TraceIn("synpred28_NPortugolWalker_fragment", 46);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:116:7: ( ^( ASGN ^( AR INT ) ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:116:7: ^( ASGN ^( AR INT ) ID plus_expression )
			{
			DebugLocation(116, 7);
			DebugLocation(116, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred28_NPortugolWalker600); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(116, 14);
			DebugLocation(116, 16);
			Match(input,AR,Follow._AR_in_synpred28_NPortugolWalker603); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(116, 19);
			Match(input,INT,Follow._INT_in_synpred28_NPortugolWalker605); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(116, 24);
			Match(input,ID,Follow._ID_in_synpred28_NPortugolWalker608); if (state.failed) return;
			DebugLocation(116, 27);
			PushFollow(Follow._plus_expression_in_synpred28_NPortugolWalker610);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred28_NPortugolWalker_fragment", 46);
			LeaveRule("synpred28_NPortugolWalker_fragment", 46);
			LeaveRule_synpred28_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred28_NPortugolWalker

	partial void EnterRule_synpred29_NPortugolWalker_fragment();
	partial void LeaveRule_synpred29_NPortugolWalker_fragment();

	// $ANTLR start synpred29_NPortugolWalker
	public void synpred29_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);

		EnterRule_synpred29_NPortugolWalker_fragment();
		EnterRule("synpred29_NPortugolWalker_fragment", 47);
		TraceIn("synpred29_NPortugolWalker_fragment", 47);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:117:7: ( ^( ASGN ^( AR i= ID ) p= ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:117:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
			{
			DebugLocation(117, 7);
			DebugLocation(117, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred29_NPortugolWalker628); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(117, 14);
			DebugLocation(117, 16);
			Match(input,AR,Follow._AR_in_synpred29_NPortugolWalker631); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(117, 20);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred29_NPortugolWalker635); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(117, 26);
			p=(CommonTree)Match(input,ID,Follow._ID_in_synpred29_NPortugolWalker640); if (state.failed) return;
			DebugLocation(117, 30);
			PushFollow(Follow._plus_expression_in_synpred29_NPortugolWalker642);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred29_NPortugolWalker_fragment", 47);
			LeaveRule("synpred29_NPortugolWalker_fragment", 47);
			LeaveRule_synpred29_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred29_NPortugolWalker

	partial void EnterRule_synpred30_NPortugolWalker_fragment();
	partial void LeaveRule_synpred30_NPortugolWalker_fragment();

	// $ANTLR start synpred30_NPortugolWalker
	public void synpred30_NPortugolWalker_fragment()
	{
		EnterRule_synpred30_NPortugolWalker_fragment();
		EnterRule("synpred30_NPortugolWalker_fragment", 48);
		TraceIn("synpred30_NPortugolWalker_fragment", 48);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:118:7: ( ^( ASGN ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:118:7: ^( ASGN ID plus_expression )
			{
			DebugLocation(118, 7);
			DebugLocation(118, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred30_NPortugolWalker664); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(118, 14);
			Match(input,ID,Follow._ID_in_synpred30_NPortugolWalker666); if (state.failed) return;
			DebugLocation(118, 17);
			PushFollow(Follow._plus_expression_in_synpred30_NPortugolWalker668);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred30_NPortugolWalker_fragment", 48);
			LeaveRule("synpred30_NPortugolWalker_fragment", 48);
			LeaveRule_synpred30_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred30_NPortugolWalker

	partial void EnterRule_synpred31_NPortugolWalker_fragment();
	partial void LeaveRule_synpred31_NPortugolWalker_fragment();

	// $ANTLR start synpred31_NPortugolWalker
	public void synpred31_NPortugolWalker_fragment()
	{
		EnterRule_synpred31_NPortugolWalker_fragment();
		EnterRule("synpred31_NPortugolWalker_fragment", 49);
		TraceIn("synpred31_NPortugolWalker_fragment", 49);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:119:7: ( ^( ASGN ID 'nulo' ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:119:7: ^( ASGN ID 'nulo' )
			{
			DebugLocation(119, 7);
			DebugLocation(119, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred31_NPortugolWalker681); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(119, 14);
			Match(input,ID,Follow._ID_in_synpred31_NPortugolWalker683); if (state.failed) return;
			DebugLocation(119, 17);
			Match(input,76,Follow._76_in_synpred31_NPortugolWalker685); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred31_NPortugolWalker_fragment", 49);
			LeaveRule("synpred31_NPortugolWalker_fragment", 49);
			LeaveRule_synpred31_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred31_NPortugolWalker

	partial void EnterRule_synpred32_NPortugolWalker_fragment();
	partial void LeaveRule_synpred32_NPortugolWalker_fragment();

	// $ANTLR start synpred32_NPortugolWalker
	public void synpred32_NPortugolWalker_fragment()
	{
		EnterRule_synpred32_NPortugolWalker_fragment();
		EnterRule("synpred32_NPortugolWalker_fragment", 50);
		TraceIn("synpred32_NPortugolWalker_fragment", 50);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:120:7: ( ^( ASGN ID 'falso' ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:120:7: ^( ASGN ID 'falso' )
			{
			DebugLocation(120, 7);
			DebugLocation(120, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred32_NPortugolWalker698); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(120, 14);
			Match(input,ID,Follow._ID_in_synpred32_NPortugolWalker700); if (state.failed) return;
			DebugLocation(120, 17);
			Match(input,75,Follow._75_in_synpred32_NPortugolWalker702); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred32_NPortugolWalker_fragment", 50);
			LeaveRule("synpred32_NPortugolWalker_fragment", 50);
			LeaveRule_synpred32_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred32_NPortugolWalker

	partial void EnterRule_synpred33_NPortugolWalker_fragment();
	partial void LeaveRule_synpred33_NPortugolWalker_fragment();

	// $ANTLR start synpred33_NPortugolWalker
	public void synpred33_NPortugolWalker_fragment()
	{
		EnterRule_synpred33_NPortugolWalker_fragment();
		EnterRule("synpred33_NPortugolWalker_fragment", 51);
		TraceIn("synpred33_NPortugolWalker_fragment", 51);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:121:7: ( ^( ASGN ID 'verdadeiro' ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:121:7: ^( ASGN ID 'verdadeiro' )
			{
			DebugLocation(121, 7);
			DebugLocation(121, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred33_NPortugolWalker715); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(121, 14);
			Match(input,ID,Follow._ID_in_synpred33_NPortugolWalker717); if (state.failed) return;
			DebugLocation(121, 17);
			Match(input,77,Follow._77_in_synpred33_NPortugolWalker719); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred33_NPortugolWalker_fragment", 51);
			LeaveRule("synpred33_NPortugolWalker_fragment", 51);
			LeaveRule_synpred33_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred33_NPortugolWalker

	partial void EnterRule_synpred34_NPortugolWalker_fragment();
	partial void LeaveRule_synpred34_NPortugolWalker_fragment();

	// $ANTLR start synpred34_NPortugolWalker
	public void synpred34_NPortugolWalker_fragment()
	{
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);

		EnterRule_synpred34_NPortugolWalker_fragment();
		EnterRule("synpred34_NPortugolWalker_fragment", 52);
		TraceIn("synpred34_NPortugolWalker_fragment", 52);
		try
		{
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:122:7: ( ^( ASGN ID l= INT r= INT ) )
			DebugEnterAlt(1);
			// E:\\Dev\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:122:7: ^( ASGN ID l= INT r= INT )
			{
			DebugLocation(122, 7);
			DebugLocation(122, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred34_NPortugolWalker740); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(122, 14);
			Match(input,ID,Follow._ID_in_synpred34_NPortugolWalker742); if (state.failed) return;
			DebugLocation(122, 18);
			l=(CommonTree)Match(input,INT,Follow._INT_in_synpred34_NPortugolWalker746); if (state.failed) return;
			DebugLocation(122, 24);
			r=(CommonTree)Match(input,INT,Follow._INT_in_synpred34_NPortugolWalker750); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred34_NPortugolWalker_fragment", 52);
			LeaveRule("synpred34_NPortugolWalker_fragment", 52);
			LeaveRule_synpred34_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred34_NPortugolWalker
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declare_function_in_script62 = new BitSet(new ulong[]{0x10002UL});
		public static readonly BitSet _FUNC_in_declare_function76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_declare_function78 = new BitSet(new ulong[]{0x220000000UL});
		public static readonly BitSet _function_param_list_in_declare_function80 = new BitSet(new ulong[]{0x220000000UL});
		public static readonly BitSet _SLIST_in_declare_function84 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_declare_function86 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _declare_local_in_statement103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_stat_in_statement108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_stat_in_statement114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_statement119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_var_in_statement125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_stat_in_statement130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _asm_code_in_statement135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARAM_in_function_param_list155 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_param_list159 = new BitSet(new ulong[]{0x40008UL});
		public static readonly BitSet _VAR_in_declare_local178 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_declare_local182 = new BitSet(new ulong[]{0x40008UL});
		public static readonly BitSet _SJMP_in_if_stat202 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat205 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat207 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat211 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat213 = new BitSet(new ulong[]{0x23828001C0UL});
		public static readonly BitSet _senao_stat_in_if_stat218 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _JMP_in_if_stat227 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat230 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat232 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat236 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat238 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _SLIST_in_senao_stat257 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_senao_stat259 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_for_stat283 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat287 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_for_stat293 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_for_stat296 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat301 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_for_stat314 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat316 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat320 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_for_stat326 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_for_stat329 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat333 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_for_stat345 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat349 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_for_stat355 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_for_stat358 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat363 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_for_stat376 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat378 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat382 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_for_stat388 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_for_stat391 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat395 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _CALL_in_function_call424 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_call426 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_function_call428 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _PCALL_in_property_call449 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_property_call453 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_property_call457 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MCALL_in_method_call482 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_method_call486 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_method_call490 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_method_call492 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _ARG_in_function_arg_list519 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_function_arg_list521 = new BitSet(new ulong[]{0x4B20C4454C108UL});
		public static readonly BitSet _ASM_in_asm_code537 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_asm_code541 = new BitSet(new ulong[]{0x400000008UL});
		public static readonly BitSet _ASGN_in_assign_var582 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var584 = new BitSet(new ulong[]{0xC0044C000UL});
		public static readonly BitSet _atom_in_assign_var588 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var600 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var603 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var605 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var608 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_assign_var610 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var631 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var635 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var640 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_assign_var642 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var664 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var666 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_assign_var668 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var681 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var683 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_assign_var685 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var698 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var700 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_assign_var702 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var715 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var717 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_assign_var719 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var740 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var742 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_assign_var746 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_assign_var750 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var762 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var764 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ILIST_in_assign_var767 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var771 = new BitSet(new ulong[]{0x400008UL});
		public static readonly BitSet _RET_in_return_stat794 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_return_stat796 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _45_in_plus_expression821 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression823 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression825 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _47_in_plus_expression833 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression835 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression837 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _44_in_plus_expression845 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression847 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression849 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _50_in_plus_expression857 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression859 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression861 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _41_in_plus_expression869 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression871 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression873 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDEX_in_plus_expression881 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_plus_expression883 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEX_in_plus_expression893 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_plus_expression897 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_plus_expression908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _method_call_in_plus_expression912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_call_in_plus_expression916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_plus_expression920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_logic_expression933 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression935 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression937 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _55_in_logic_expression948 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression950 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression952 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _52_in_logic_expression963 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression965 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression967 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _56_in_logic_expression978 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression980 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression982 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _54_in_logic_expression993 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression995 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression997 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _39_in_logic_expression1008 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1010 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1012 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _61_in_logic_expression1023 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1025 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1027 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _66_in_logic_expression1036 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1038 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1040 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _plus_expression_in_logic_expression1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom1080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_atom1092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_atom1103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom1114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _T_in_atom1125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _F_in_atom1140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOOP_in_synpred17_NPortugolWalker283 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred17_NPortugolWalker287 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_synpred17_NPortugolWalker293 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_synpred17_NPortugolWalker296 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred17_NPortugolWalker301 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_synpred19_NPortugolWalker314 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_synpred19_NPortugolWalker316 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_synpred19_NPortugolWalker320 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_synpred19_NPortugolWalker326 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_synpred19_NPortugolWalker329 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred19_NPortugolWalker333 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_synpred21_NPortugolWalker345 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred21_NPortugolWalker349 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_synpred21_NPortugolWalker355 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_synpred21_NPortugolWalker358 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred21_NPortugolWalker363 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _ASGN_in_synpred27_NPortugolWalker582 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred27_NPortugolWalker584 = new BitSet(new ulong[]{0xC0044C000UL});
		public static readonly BitSet _atom_in_synpred27_NPortugolWalker588 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred28_NPortugolWalker600 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred28_NPortugolWalker603 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_synpred28_NPortugolWalker605 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred28_NPortugolWalker608 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_synpred28_NPortugolWalker610 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred29_NPortugolWalker628 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred29_NPortugolWalker631 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred29_NPortugolWalker635 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred29_NPortugolWalker640 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_synpred29_NPortugolWalker642 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred30_NPortugolWalker664 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred30_NPortugolWalker666 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_synpred30_NPortugolWalker668 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred31_NPortugolWalker681 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred31_NPortugolWalker683 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_synpred31_NPortugolWalker685 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred32_NPortugolWalker698 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred32_NPortugolWalker700 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_synpred32_NPortugolWalker702 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred33_NPortugolWalker715 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred33_NPortugolWalker717 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_synpred33_NPortugolWalker719 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred34_NPortugolWalker740 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred34_NPortugolWalker742 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_synpred34_NPortugolWalker746 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_synpred34_NPortugolWalker750 = new BitSet(new ulong[]{0x8UL});
	}
	#endregion Follow sets
}

} // namespace NPortugol
