//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g 2012-05-09 10:50:11

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

using System.Collections;

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using NPortugol;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace PSharp.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class NPortugolWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AR", "ARG", "ASGN", "CALL", "CHAR", "DEC", "ESC_SEQ", "EXP", "EXPONENT", "FLOAT", "FUNC", "HEX_DIGIT", "ID", "ILIST", "INDEX", "INIT", "INT", "JMP", "LEXP", "LOOP", "MCALL", "NEWLINE", "OCTAL_ESC", "PARAM", "PCALL", "RET", "SJMP", "SLIST", "STRING", "UNICODE_ESC", "VAR", "WS", "'!='", "'%'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'..'", "'/'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'ate'", "'dec'", "'e'", "'enquanto'", "'entao'", "'fim'", "'funcao'", "'ou'", "'para'", "'repita'", "'retorne'", "'se'", "'senao'", "'variavel'", "'{'", "'}'", "'falso'", "'nulo'", "'verdadeiro'"
	};
	public const int EOF=-1;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int AR=4;
	public const int ARG=5;
	public const int ASGN=6;
	public const int CALL=7;
	public const int CHAR=8;
	public const int DEC=9;
	public const int ESC_SEQ=10;
	public const int EXP=11;
	public const int EXPONENT=12;
	public const int FLOAT=13;
	public const int FUNC=14;
	public const int HEX_DIGIT=15;
	public const int ID=16;
	public const int ILIST=17;
	public const int INDEX=18;
	public const int INIT=19;
	public const int INT=20;
	public const int JMP=21;
	public const int LEXP=22;
	public const int LOOP=23;
	public const int MCALL=24;
	public const int NEWLINE=25;
	public const int OCTAL_ESC=26;
	public const int PARAM=27;
	public const int PCALL=28;
	public const int RET=29;
	public const int SJMP=30;
	public const int SLIST=31;
	public const int STRING=32;
	public const int UNICODE_ESC=33;
	public const int VAR=34;
	public const int WS=35;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;

	public NPortugolWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public NPortugolWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return NPortugolWalker.tokenNames; } }
	public override string GrammarFileName { get { return "E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g"; } }


		Emitter emitter = new Emitter();
		
		bool inExpression;
		
		public Dictionary<int, int> SourceMap { get { return emitter.SourceMap; } }
		
		public bool DebugInfo {get {return emitter.DebugInfo;} set{emitter.DebugInfo = value;} }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:8: public script returns [IList<string> scriptLines] : ( declare_function )* ;
	[GrammarRule("script")]
	public IList<string> script()
	{
		EnterRule_script();
		EnterRule("script", 1);
		TraceIn("script", 1);
		IList<string> scriptLines = default(IList<string>);


		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(25, 0);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:50: ( ( declare_function )* )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:52: ( declare_function )*
			{
			DebugLocation(25, 52);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:52: ( declare_function )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==FUNC))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:25:52: declare_function
					{
					DebugLocation(25, 52);
					PushFollow(Follow._declare_function_in_script62);
					declare_function();
					PopFollow();
					if (state.failed) return scriptLines;

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(26, 2);
			if (state.backtracking == 0)
			{
				 return emitter.ScriptLines;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("script", 1);
			LeaveRule("script", 1);
			LeaveRule_script();
		}
		DebugLocation(27, 0);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return scriptLines;

	}
	// $ANTLR end "script"

	partial void EnterRule_declare_function();
	partial void LeaveRule_declare_function();

	// $ANTLR start "declare_function"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:1: declare_function : ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) ) ;
	[GrammarRule("declare_function")]
	private void declare_function()
	{
		EnterRule_declare_function();
		EnterRule("declare_function", 2);
		TraceIn("declare_function", 2);
		CommonTree ID1 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "declare_function");
		DebugLocation(29, 0);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:18: ( ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:20: ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) )
			{
			DebugLocation(29, 20);
			DebugLocation(29, 22);
			Match(input,FUNC,Follow._FUNC_in_declare_function76); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(29, 27);
			ID1=(CommonTree)Match(input,ID,Follow._ID_in_declare_function78); if (state.failed) return;
			DebugLocation(29, 30);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:30: ( function_param_list )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==PARAM))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:30: function_param_list
					{
					DebugLocation(29, 30);
					PushFollow(Follow._function_param_list_in_declare_function80);
					function_param_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(29, 51);
			DebugLocation(29, 53);
			Match(input,SLIST,Follow._SLIST_in_declare_function84); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(29, 59);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:59: ( statement )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>=ASGN && LA3_0<=CALL)||LA3_0==JMP||LA3_0==LOOP||(LA3_0>=RET && LA3_0<=SJMP)||LA3_0==VAR))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:29:59: statement
						{
						DebugLocation(29, 59);
						PushFollow(Follow._statement_in_declare_function86);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(30, 2);
			if (state.backtracking == 0)
			{
				emitter.EmitFunction(ID1.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_function", 2);
			LeaveRule("declare_function", 2);
			LeaveRule_declare_function();
		}
		DebugLocation(31, 0);
		} finally { DebugExitRule(GrammarFileName, "declare_function"); }
		return;

	}
	// $ANTLR end "declare_function"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:33:1: statement : ( declare_local | if_stat | for_stat | function_call | assign_var | return_stat );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(33, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:33:10: ( declare_local | if_stat | for_stat | function_call | assign_var | return_stat )
			int alt4=6;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt4 = 1;
				}
				break;
			case JMP:
			case SJMP:
				{
				alt4 = 2;
				}
				break;
			case LOOP:
				{
				alt4 = 3;
				}
				break;
			case CALL:
				{
				alt4 = 4;
				}
				break;
			case ASGN:
				{
				alt4 = 5;
				}
				break;
			case RET:
				{
				alt4 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:33:12: declare_local
				{
				DebugLocation(33, 12);
				PushFollow(Follow._declare_local_in_statement102);
				declare_local();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:34:4: if_stat
				{
				DebugLocation(34, 4);
				PushFollow(Follow._if_stat_in_statement107);
				if_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:35:4: for_stat
				{
				DebugLocation(35, 4);
				PushFollow(Follow._for_stat_in_statement113);
				for_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:36:4: function_call
				{
				DebugLocation(36, 4);
				PushFollow(Follow._function_call_in_statement118);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:37:4: assign_var
				{
				DebugLocation(37, 4);
				PushFollow(Follow._assign_var_in_statement124);
				assign_var();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:38:4: return_stat
				{
				DebugLocation(38, 4);
				PushFollow(Follow._return_stat_in_statement129);
				return_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(39, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_function_param_list();
	partial void LeaveRule_function_param_list();

	// $ANTLR start "function_param_list"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:42:1: function_param_list : ^( PARAM (p+= ID )* ) ;
	[GrammarRule("function_param_list")]
	private void function_param_list()
	{
		EnterRule_function_param_list();
		EnterRule("function_param_list", 4);
		TraceIn("function_param_list", 4);
		CommonTree p = default(CommonTree);
		List<CommonTree> list_p = null;

		try { DebugEnterRule(GrammarFileName, "function_param_list");
		DebugLocation(42, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:43:2: ( ^( PARAM (p+= ID )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:43:5: ^( PARAM (p+= ID )* )
			{
			DebugLocation(43, 5);
			DebugLocation(43, 7);
			Match(input,PARAM,Follow._PARAM_in_function_param_list149); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(43, 14);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:43:14: (p+= ID )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==ID))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:43:14: p+= ID
						{
						DebugLocation(43, 14);
						p=(CommonTree)Match(input,ID,Follow._ID_in_function_param_list153); if (state.failed) return;
						if (list_p==null) list_p=new List<CommonTree>();
						list_p.Add(p);


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(43, 21);
			if (state.backtracking == 0)
			{
				 foreach(var item in list_p) emitter.AddParam(item.Text); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_param_list", 4);
			LeaveRule("function_param_list", 4);
			LeaveRule_function_param_list();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "function_param_list"); }
		return;

	}
	// $ANTLR end "function_param_list"

	partial void EnterRule_declare_local();
	partial void LeaveRule_declare_local();

	// $ANTLR start "declare_local"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:46:1: declare_local : ^( VAR (i+= ID )* ) ;
	[GrammarRule("declare_local")]
	private void declare_local()
	{
		EnterRule_declare_local();
		EnterRule("declare_local", 5);
		TraceIn("declare_local", 5);
		CommonTree i = default(CommonTree);
		List<CommonTree> list_i = null;

		try { DebugEnterRule(GrammarFileName, "declare_local");
		DebugLocation(46, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:47:2: ( ^( VAR (i+= ID )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:47:5: ^( VAR (i+= ID )* )
			{
			DebugLocation(47, 5);
			DebugLocation(47, 7);
			Match(input,VAR,Follow._VAR_in_declare_local172); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(47, 12);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:47:12: (i+= ID )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==ID))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:47:12: i+= ID
						{
						DebugLocation(47, 12);
						i=(CommonTree)Match(input,ID,Follow._ID_in_declare_local176); if (state.failed) return;
						if (list_i==null) list_i=new List<CommonTree>();
						list_i.Add(i);


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(47, 20);
			if (state.backtracking == 0)
			{
				 foreach(var item in list_i) emitter.EmitVar(item.Token); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_local", 5);
			LeaveRule("declare_local", 5);
			LeaveRule_declare_local();
		}
		DebugLocation(48, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_local"); }
		return;

	}
	// $ANTLR end "declare_local"

	partial void EnterRule_if_stat();
	partial void LeaveRule_if_stat();

	// $ANTLR start "if_stat"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:56:1: if_stat : ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) );
	[GrammarRule("if_stat")]
	private void if_stat()
	{
		EnterRule_if_stat();
		EnterRule("if_stat", 6);
		TraceIn("if_stat", 6);
		try { DebugEnterRule(GrammarFileName, "if_stat");
		DebugLocation(56, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:57:2: ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==SJMP))
			{
				alt9 = 1;
			}
			else if ((LA9_0==JMP))
			{
				alt9 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:57:5: ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) )
				{
				DebugLocation(57, 5);
				DebugLocation(57, 7);
				Match(input,SJMP,Follow._SJMP_in_if_stat196); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(57, 12);
				DebugLocation(57, 14);
				Match(input,LEXP,Follow._LEXP_in_if_stat199); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(57, 19);
				PushFollow(Follow._logic_expression_in_if_stat201);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(57, 37);
				DebugLocation(57, 39);
				Match(input,SLIST,Follow._SLIST_in_if_stat205); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(57, 45);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:57:45: ( statement )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>=ASGN && LA7_0<=CALL)||LA7_0==JMP||LA7_0==LOOP||(LA7_0>=RET && LA7_0<=SJMP)||LA7_0==VAR))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:57:45: statement
						{
						DebugLocation(57, 45);
						PushFollow(Follow._statement_in_if_stat207);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(57, 56);
				if (state.backtracking == 0)
				{
					emitter.EmitIf(true);
				}
				DebugLocation(57, 80);
				PushFollow(Follow._senao_stat_in_if_stat212);
				senao_stat();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:58:5: ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) )
				{
				DebugLocation(58, 5);
				DebugLocation(58, 7);
				Match(input,JMP,Follow._JMP_in_if_stat221); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(58, 11);
				DebugLocation(58, 13);
				Match(input,LEXP,Follow._LEXP_in_if_stat224); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(58, 18);
				PushFollow(Follow._logic_expression_in_if_stat226);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(58, 36);
				DebugLocation(58, 38);
				Match(input,SLIST,Follow._SLIST_in_if_stat230); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(58, 44);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:58:44: ( statement )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if (((LA8_0>=ASGN && LA8_0<=CALL)||LA8_0==JMP||LA8_0==LOOP||(LA8_0>=RET && LA8_0<=SJMP)||LA8_0==VAR))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:58:44: statement
							{
							DebugLocation(58, 44);
							PushFollow(Follow._statement_in_if_stat232);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(59, 2);
				if (state.backtracking == 0)
				{
					emitter.EmitIf(false);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("if_stat", 6);
			LeaveRule("if_stat", 6);
			LeaveRule_if_stat();
		}
		DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "if_stat"); }
		return;

	}
	// $ANTLR end "if_stat"

	partial void EnterRule_senao_stat();
	partial void LeaveRule_senao_stat();

	// $ANTLR start "senao_stat"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:62:1: senao_stat : ^( SLIST ( statement )* ) ;
	[GrammarRule("senao_stat")]
	private void senao_stat()
	{
		EnterRule_senao_stat();
		EnterRule("senao_stat", 7);
		TraceIn("senao_stat", 7);
		try { DebugEnterRule(GrammarFileName, "senao_stat");
		DebugLocation(62, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:63:2: ( ^( SLIST ( statement )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:63:4: ^( SLIST ( statement )* )
			{
			DebugLocation(63, 4);
			DebugLocation(63, 6);
			Match(input,SLIST,Follow._SLIST_in_senao_stat251); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(63, 12);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:63:12: ( statement )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if (((LA10_0>=ASGN && LA10_0<=CALL)||LA10_0==JMP||LA10_0==LOOP||(LA10_0>=RET && LA10_0<=SJMP)||LA10_0==VAR))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:63:12: statement
						{
						DebugLocation(63, 12);
						PushFollow(Follow._statement_in_senao_stat253);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(64, 5);
			if (state.backtracking == 0)
			{
				emitter.EmitElse();
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("senao_stat", 7);
			LeaveRule("senao_stat", 7);
			LeaveRule_senao_stat();
		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "senao_stat"); }
		return;

	}
	// $ANTLR end "senao_stat"

	partial void EnterRule_for_stat();
	partial void LeaveRule_for_stat();

	// $ANTLR start "for_stat"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:1: for_stat : ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) );
	[GrammarRule("for_stat")]
	private void for_stat()
	{
		EnterRule_for_stat();
		EnterRule("for_stat", 8);
		TraceIn("for_stat", 8);
		CommonTree i = default(CommonTree);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "for_stat");
		DebugLocation(68, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:9: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			int alt15=4;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==LOOP))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==DOWN))
				{
					int LA15_2 = input.LA(3);

					if ((LA15_2==DEC))
					{
						int LA15_3 = input.LA(4);

						if ((EvaluatePredicate(synpred18_NPortugolWalker_fragment)))
						{
							alt15 = 2;
						}
						else if ((true))
						{
							alt15 = 4;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 15, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA15_2==ASGN))
					{
						int LA15_4 = input.LA(4);

						if ((EvaluatePredicate(synpred16_NPortugolWalker_fragment)))
						{
							alt15 = 1;
						}
						else if ((EvaluatePredicate(synpred20_NPortugolWalker_fragment)))
						{
							alt15 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 15, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 15, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:11: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(68, 11);
				DebugLocation(68, 13);
				Match(input,LOOP,Follow._LOOP_in_for_stat276); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 19);
				PushFollow(Follow._assign_var_in_for_stat280);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(68, 31);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(68, 58);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat286); if (state.failed) return;
				DebugLocation(68, 63);
				DebugLocation(68, 65);
				Match(input,SLIST,Follow._SLIST_in_for_stat289); if (state.failed) return;

				DebugLocation(68, 72);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, true);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(68, 111);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:111: ( statement )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if (((LA11_0>=ASGN && LA11_0<=CALL)||LA11_0==JMP||LA11_0==LOOP||(LA11_0>=RET && LA11_0<=SJMP)||LA11_0==VAR))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:111: statement
							{
							DebugLocation(68, 111);
							PushFollow(Follow._statement_in_for_stat294);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(68, 126);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, true);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(69, 4);
				DebugLocation(69, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat307); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(69, 11);
				Match(input,DEC,Follow._DEC_in_for_stat309); if (state.failed) return;
				DebugLocation(69, 16);
				PushFollow(Follow._assign_var_in_for_stat313);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(69, 28);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(69, 55);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat319); if (state.failed) return;
				DebugLocation(69, 60);
				DebugLocation(69, 62);
				Match(input,SLIST,Follow._SLIST_in_for_stat322); if (state.failed) return;

				DebugLocation(69, 68);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, false);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(69, 108);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:108: ( statement )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if (((LA12_0>=ASGN && LA12_0<=CALL)||LA12_0==JMP||LA12_0==LOOP||(LA12_0>=RET && LA12_0<=SJMP)||LA12_0==VAR))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:108: statement
							{
							DebugLocation(69, 108);
							PushFollow(Follow._statement_in_for_stat326);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(69, 122);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, false);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(70, 4);
				DebugLocation(70, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat338); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(70, 12);
				PushFollow(Follow._assign_var_in_for_stat342);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(70, 24);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(70, 51);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat348); if (state.failed) return;
				DebugLocation(70, 55);
				DebugLocation(70, 57);
				Match(input,SLIST,Follow._SLIST_in_for_stat351); if (state.failed) return;

				DebugLocation(70, 64);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, true);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(70, 103);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: ( statement )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if (((LA13_0>=ASGN && LA13_0<=CALL)||LA13_0==JMP||LA13_0==LOOP||(LA13_0>=RET && LA13_0<=SJMP)||LA13_0==VAR))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: statement
							{
							DebugLocation(70, 103);
							PushFollow(Follow._statement_in_for_stat356);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(70, 118);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, true);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:4: ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(71, 4);
				DebugLocation(71, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat369); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(71, 11);
				Match(input,DEC,Follow._DEC_in_for_stat371); if (state.failed) return;
				DebugLocation(71, 16);
				PushFollow(Follow._assign_var_in_for_stat375);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(71, 28);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(71, 55);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat381); if (state.failed) return;
				DebugLocation(71, 59);
				DebugLocation(71, 61);
				Match(input,SLIST,Follow._SLIST_in_for_stat384); if (state.failed) return;

				DebugLocation(71, 67);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, false);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(71, 107);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:107: ( statement )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if (((LA14_0>=ASGN && LA14_0<=CALL)||LA14_0==JMP||LA14_0==LOOP||(LA14_0>=RET && LA14_0<=SJMP)||LA14_0==VAR))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:107: statement
							{
							DebugLocation(71, 107);
							PushFollow(Follow._statement_in_for_stat388);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(71, 121);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, false);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_stat", 8);
			LeaveRule("for_stat", 8);
			LeaveRule_for_stat();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "for_stat"); }
		return;

	}
	// $ANTLR end "for_stat"

	partial void EnterRule_function_call();
	partial void LeaveRule_function_call();

	// $ANTLR start "function_call"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:85:1: function_call : ^( CALL ID ( function_arg_list )* ) ;
	[GrammarRule("function_call")]
	private void function_call()
	{
		EnterRule_function_call();
		EnterRule("function_call", 9);
		TraceIn("function_call", 9);
		CommonTree ID2 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "function_call");
		DebugLocation(85, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:86:2: ( ^( CALL ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:86:5: ^( CALL ID ( function_arg_list )* )
			{
			DebugLocation(86, 5);
			DebugLocation(86, 7);
			Match(input,CALL,Follow._CALL_in_function_call417); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(86, 12);
			ID2=(CommonTree)Match(input,ID,Follow._ID_in_function_call419); if (state.failed) return;
			DebugLocation(86, 15);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:86:15: ( function_arg_list )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==ARG))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:86:15: function_arg_list
					{
					DebugLocation(86, 15);
					PushFollow(Follow._function_arg_list_in_function_call421);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(87, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitCall(ID2.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_call", 9);
			LeaveRule("function_call", 9);
			LeaveRule_function_call();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "function_call"); }
		return;

	}
	// $ANTLR end "function_call"

	partial void EnterRule_property_call();
	partial void LeaveRule_property_call();

	// $ANTLR start "property_call"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:90:1: property_call : ^( PCALL o= ID p= ID ) ;
	[GrammarRule("property_call")]
	private void property_call()
	{
		EnterRule_property_call();
		EnterRule("property_call", 10);
		TraceIn("property_call", 10);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "property_call");
		DebugLocation(90, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:91:2: ( ^( PCALL o= ID p= ID ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:91:5: ^( PCALL o= ID p= ID )
			{
			DebugLocation(91, 5);
			DebugLocation(91, 7);
			Match(input,PCALL,Follow._PCALL_in_property_call442); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(91, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_property_call446); if (state.failed) return;
			DebugLocation(91, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_property_call450); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(92, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitPropCall(o.Token, p.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("property_call", 10);
			LeaveRule("property_call", 10);
			LeaveRule_property_call();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "property_call"); }
		return;

	}
	// $ANTLR end "property_call"

	partial void EnterRule_method_call();
	partial void LeaveRule_method_call();

	// $ANTLR start "method_call"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:95:1: method_call : ^( MCALL o= ID p= ID ( function_arg_list )* ) ;
	[GrammarRule("method_call")]
	private void method_call()
	{
		EnterRule_method_call();
		EnterRule("method_call", 11);
		TraceIn("method_call", 11);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "method_call");
		DebugLocation(95, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:96:2: ( ^( MCALL o= ID p= ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:96:5: ^( MCALL o= ID p= ID ( function_arg_list )* )
			{
			DebugLocation(96, 5);
			DebugLocation(96, 7);
			Match(input,MCALL,Follow._MCALL_in_method_call475); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(96, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_method_call479); if (state.failed) return;
			DebugLocation(96, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_method_call483); if (state.failed) return;
			DebugLocation(96, 23);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:96:23: ( function_arg_list )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==ARG))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:96:23: function_arg_list
					{
					DebugLocation(96, 23);
					PushFollow(Follow._function_arg_list_in_method_call485);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(97, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitMethodCall(o.Token, p.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("method_call", 11);
			LeaveRule("method_call", 11);
			LeaveRule_method_call();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "method_call"); }
		return;

	}
	// $ANTLR end "method_call"

	partial void EnterRule_function_arg_list();
	partial void LeaveRule_function_arg_list();

	// $ANTLR start "function_arg_list"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:100:1: function_arg_list : ^( ARG ( plus_expression )* ) ;
	[GrammarRule("function_arg_list")]
	private void function_arg_list()
	{
		EnterRule_function_arg_list();
		EnterRule("function_arg_list", 12);
		TraceIn("function_arg_list", 12);
		try { DebugEnterRule(GrammarFileName, "function_arg_list");
		DebugLocation(100, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:102:2: ( ^( ARG ( plus_expression )* ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:102:4: ^( ARG ( plus_expression )* )
			{
			DebugLocation(102, 4);
			DebugLocation(102, 6);
			Match(input,ARG,Follow._ARG_in_function_arg_list512); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(102, 10);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:102:10: ( plus_expression )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==CALL||LA18_0==FLOAT||LA18_0==ID||LA18_0==INDEX||LA18_0==INT||LA18_0==MCALL||LA18_0==PCALL||LA18_0==STRING||(LA18_0>=40 && LA18_0<=41)||LA18_0==43||LA18_0==46))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:102:10: plus_expression
						{
						DebugLocation(102, 10);
						PushFollow(Follow._plus_expression_in_function_arg_list514);
						plus_expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_arg_list", 12);
			LeaveRule("function_arg_list", 12);
			LeaveRule_function_arg_list();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "function_arg_list"); }
		return;

	}
	// $ANTLR end "function_arg_list"

	partial void EnterRule_assign_var();
	partial void LeaveRule_assign_var();

	// $ANTLR start "assign_var"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:105:1: assign_var returns [string id] : ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) );
	[GrammarRule("assign_var")]
	private string assign_var()
	{
		EnterRule_assign_var();
		EnterRule("assign_var", 13);
		TraceIn("assign_var", 13);
		string id = default(string);


		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);
		CommonTree ID3 = default(CommonTree);
		CommonTree ID4 = default(CommonTree);
		CommonTree INT5 = default(CommonTree);
		CommonTree ID6 = default(CommonTree);
		CommonTree ID7 = default(CommonTree);
		CommonTree ID8 = default(CommonTree);
		CommonTree ID9 = default(CommonTree);
		CommonTree ID10 = default(CommonTree);
		CommonTree ID11 = default(CommonTree);
		object a = default(object);

		try { DebugEnterRule(GrammarFileName, "assign_var");
		DebugLocation(105, 4);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:106:5: ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) )
			int alt20=9;
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==ASGN))
			{
				int LA20_1 = input.LA(2);

				if ((LA20_1==DOWN))
				{
					int LA20_2 = input.LA(3);

					if ((LA20_2==ID))
					{
						int LA20_3 = input.LA(4);

						if ((EvaluatePredicate(synpred25_NPortugolWalker_fragment)))
						{
							alt20 = 1;
						}
						else if ((EvaluatePredicate(synpred28_NPortugolWalker_fragment)))
						{
							alt20 = 4;
						}
						else if ((EvaluatePredicate(synpred29_NPortugolWalker_fragment)))
						{
							alt20 = 5;
						}
						else if ((EvaluatePredicate(synpred30_NPortugolWalker_fragment)))
						{
							alt20 = 6;
						}
						else if ((EvaluatePredicate(synpred31_NPortugolWalker_fragment)))
						{
							alt20 = 7;
						}
						else if ((EvaluatePredicate(synpred32_NPortugolWalker_fragment)))
						{
							alt20 = 8;
						}
						else if ((true))
						{
							alt20 = 9;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 20, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA20_2==AR))
					{
						int LA20_4 = input.LA(4);

						if ((EvaluatePredicate(synpred26_NPortugolWalker_fragment)))
						{
							alt20 = 2;
						}
						else if ((EvaluatePredicate(synpred27_NPortugolWalker_fragment)))
						{
							alt20 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 20, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return id;}
						NoViableAltException nvae = new NoViableAltException("", 20, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return id;}
					NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return id;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:107:7: ^( ASGN ID a= atom )
				{
				DebugLocation(107, 7);
				DebugLocation(107, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var543); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(107, 14);
				ID3=(CommonTree)Match(input,ID,Follow._ID_in_assign_var545); if (state.failed) return id;
				DebugLocation(107, 18);
				PushFollow(Follow._atom_in_assign_var549);
				a=atom();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(107, 25);
				if (state.backtracking == 0)
				{
					id = (ID3!=null?ID3.Text:null); emitter.EmitAssign(ID3.Token, a);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:7: ^( ASGN ^( AR INT ) ID plus_expression )
				{
				DebugLocation(108, 7);
				DebugLocation(108, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var561); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(108, 14);
				DebugLocation(108, 16);
				Match(input,AR,Follow._AR_in_assign_var564); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(108, 19);
				INT5=(CommonTree)Match(input,INT,Follow._INT_in_assign_var566); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(108, 24);
				ID4=(CommonTree)Match(input,ID,Follow._ID_in_assign_var569); if (state.failed) return id;
				DebugLocation(108, 27);
				PushFollow(Follow._plus_expression_in_assign_var571);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(108, 44);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(ID4.Token, int.Parse((INT5!=null?INT5.Text:null)));
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:109:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
				{
				DebugLocation(109, 7);
				DebugLocation(109, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var589); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(109, 14);
				DebugLocation(109, 16);
				Match(input,AR,Follow._AR_in_assign_var592); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(109, 20);
				i=(CommonTree)Match(input,ID,Follow._ID_in_assign_var596); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(109, 26);
				p=(CommonTree)Match(input,ID,Follow._ID_in_assign_var601); if (state.failed) return id;
				DebugLocation(109, 30);
				PushFollow(Follow._plus_expression_in_assign_var603);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(109, 47);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(p.Token, (i!=null?i.Text:null));
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:110:7: ^( ASGN ID plus_expression )
				{
				DebugLocation(110, 7);
				DebugLocation(110, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var625); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(110, 14);
				ID6=(CommonTree)Match(input,ID,Follow._ID_in_assign_var627); if (state.failed) return id;
				DebugLocation(110, 17);
				PushFollow(Follow._plus_expression_in_assign_var629);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(110, 34);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(ID6.Token);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:111:7: ^( ASGN ID 'nulo' )
				{
				DebugLocation(111, 7);
				DebugLocation(111, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var642); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(111, 14);
				ID7=(CommonTree)Match(input,ID,Follow._ID_in_assign_var644); if (state.failed) return id;
				DebugLocation(111, 17);
				Match(input,72,Follow._72_in_assign_var646); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(111, 25);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID7.Token, null);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:112:7: ^( ASGN ID 'falso' )
				{
				DebugLocation(112, 7);
				DebugLocation(112, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var659); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(112, 14);
				ID8=(CommonTree)Match(input,ID,Follow._ID_in_assign_var661); if (state.failed) return id;
				DebugLocation(112, 17);
				Match(input,71,Follow._71_in_assign_var663); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(112, 26);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID8.Token, false);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:113:7: ^( ASGN ID 'verdadeiro' )
				{
				DebugLocation(113, 7);
				DebugLocation(113, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var676); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(113, 14);
				ID9=(CommonTree)Match(input,ID,Follow._ID_in_assign_var678); if (state.failed) return id;
				DebugLocation(113, 17);
				Match(input,73,Follow._73_in_assign_var680); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(113, 31);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID9.Token, true);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:114:7: ^( ASGN ID l= INT r= INT )
				{
				DebugLocation(114, 7);
				DebugLocation(114, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var701); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(114, 14);
				ID10=(CommonTree)Match(input,ID,Follow._ID_in_assign_var703); if (state.failed) return id;
				DebugLocation(114, 18);
				l=(CommonTree)Match(input,INT,Follow._INT_in_assign_var707); if (state.failed) return id;
				DebugLocation(114, 24);
				r=(CommonTree)Match(input,INT,Follow._INT_in_assign_var711); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(114, 30);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID10.Token, int.Parse((l!=null?l.Text:null)), int.Parse((r!=null?r.Text:null)));
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:7: ^( ASGN ID ^( ILIST (i= INT )* ) )
				{
				DebugLocation(115, 7);
				DebugLocation(115, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var723); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(115, 14);
				ID11=(CommonTree)Match(input,ID,Follow._ID_in_assign_var725); if (state.failed) return id;
				DebugLocation(115, 17);
				DebugLocation(115, 19);
				Match(input,ILIST,Follow._ILIST_in_assign_var728); if (state.failed) return id;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return id;
					DebugLocation(115, 26);
					// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:26: (i= INT )*
					try { DebugEnterSubRule(19);
					while (true)
					{
						int alt19=2;
						try { DebugEnterDecision(19, false);
						int LA19_0 = input.LA(1);

						if ((LA19_0==INT))
						{
							alt19 = 1;
						}


						} finally { DebugExitDecision(19); }
						switch ( alt19 )
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:26: i= INT
							{
							DebugLocation(115, 26);
							i=(CommonTree)Match(input,INT,Follow._INT_in_assign_var732); if (state.failed) return id;

							}
							break;

						default:
							goto loop19;
						}
					}

					loop19:
						;

					} finally { DebugExitSubRule(19); }


					Match(input, TokenTypes.Up, null); if (state.failed) return id;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(115, 34);
				if (state.backtracking == 0)
				{
					emitter.EmitAssignArray(ID11.Token, i);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assign_var", 13);
			LeaveRule("assign_var", 13);
			LeaveRule_assign_var();
		}
		DebugLocation(116, 4);
		} finally { DebugExitRule(GrammarFileName, "assign_var"); }
		return id;

	}
	// $ANTLR end "assign_var"

	partial void EnterRule_return_stat();
	partial void LeaveRule_return_stat();

	// $ANTLR start "return_stat"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:118:1: return_stat : ^( RET plus_expression ) ;
	[GrammarRule("return_stat")]
	private void return_stat()
	{
		EnterRule_return_stat();
		EnterRule("return_stat", 14);
		TraceIn("return_stat", 14);
		CommonTree RET12 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "return_stat");
		DebugLocation(118, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:119:2: ( ^( RET plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:119:5: ^( RET plus_expression )
			{
			DebugLocation(119, 5);
			DebugLocation(119, 7);
			RET12=(CommonTree)Match(input,RET,Follow._RET_in_return_stat755); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(119, 11);
			PushFollow(Follow._plus_expression_in_return_stat757);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(119, 27);
			if (state.backtracking == 0)
			{
				emitter.EmitRet(RET12.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("return_stat", 14);
			LeaveRule("return_stat", 14);
			LeaveRule_return_stat();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "return_stat"); }
		return;

	}
	// $ANTLR end "return_stat"

	partial void EnterRule_plus_expression();
	partial void LeaveRule_plus_expression();

	// $ANTLR start "plus_expression"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:124:1: plus_expression : ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom );
	[GrammarRule("plus_expression")]
	private void plus_expression()
	{
		EnterRule_plus_expression();
		EnterRule("plus_expression", 15);
		TraceIn("plus_expression", 15);
		CommonTree i2 = default(CommonTree);
		CommonTree i1 = default(CommonTree);
		CommonTree ID13 = default(CommonTree);
		CommonTree INT14 = default(CommonTree);

		 inExpression = true; 
		try { DebugEnterRule(GrammarFileName, "plus_expression");
		DebugLocation(124, 0);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:127:3: ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom )
			int alt21=10;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case 41:
				{
				alt21 = 1;
				}
				break;
			case 43:
				{
				alt21 = 2;
				}
				break;
			case 40:
				{
				alt21 = 3;
				}
				break;
			case 46:
				{
				alt21 = 4;
				}
				break;
			case INDEX:
				{
				int LA21_5 = input.LA(2);

				if ((LA21_5==DOWN))
				{
					int LA21_13 = input.LA(3);

					if ((LA21_13==INT))
					{
						alt21 = 5;
					}
					else if ((LA21_13==ID))
					{
						alt21 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 21, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 21, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CALL:
				{
				alt21 = 7;
				}
				break;
			case MCALL:
				{
				alt21 = 8;
				}
				break;
			case PCALL:
				{
				alt21 = 9;
				}
				break;
			case FLOAT:
			case ID:
			case INT:
			case STRING:
				{
				alt21 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:127:3: ^( '+' plus_expression plus_expression )
				{
				DebugLocation(127, 3);
				DebugLocation(127, 5);
				Match(input,41,Follow._41_in_plus_expression782); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(127, 9);
				PushFollow(Follow._plus_expression_in_plus_expression784);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(127, 25);
				PushFollow(Follow._plus_expression_in_plus_expression786);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(127, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackAdd();
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:128:3: ^( '-' plus_expression plus_expression )
				{
				DebugLocation(128, 3);
				DebugLocation(128, 5);
				Match(input,43,Follow._43_in_plus_expression794); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(128, 9);
				PushFollow(Follow._plus_expression_in_plus_expression796);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(128, 25);
				PushFollow(Follow._plus_expression_in_plus_expression798);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(128, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackSub();
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:129:3: ^( '*' plus_expression plus_expression )
				{
				DebugLocation(129, 3);
				DebugLocation(129, 5);
				Match(input,40,Follow._40_in_plus_expression806); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(129, 9);
				PushFollow(Follow._plus_expression_in_plus_expression808);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(129, 25);
				PushFollow(Follow._plus_expression_in_plus_expression810);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(129, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackPlus();
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:130:3: ^( '/' plus_expression plus_expression )
				{
				DebugLocation(130, 3);
				DebugLocation(130, 5);
				Match(input,46,Follow._46_in_plus_expression818); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(130, 9);
				PushFollow(Follow._plus_expression_in_plus_expression820);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(130, 25);
				PushFollow(Follow._plus_expression_in_plus_expression822);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(130, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackDiv();
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:131:3: ^( INDEX INT ) ID
				{
				DebugLocation(131, 3);
				DebugLocation(131, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression830); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(131, 11);
				INT14=(CommonTree)Match(input,INT,Follow._INT_in_plus_expression832); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(131, 16);
				ID13=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression835); if (state.failed) return;
				DebugLocation(131, 19);
				if (state.backtracking == 0)
				{
					emitter.EmitPush((ID13!=null?ID13.Text:null), int.Parse((INT14!=null?INT14.Text:null)));
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:132:3: ^( INDEX i2= ID ) i1= ID
				{
				DebugLocation(132, 3);
				DebugLocation(132, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression842); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(132, 13);
				i2=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression846); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(132, 20);
				i1=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression851); if (state.failed) return;
				DebugLocation(132, 24);
				if (state.backtracking == 0)
				{
					emitter.EmitPush((i1!=null?i1.Text:null), (i2!=null?i2.Text:null));
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:133:3: function_call
				{
				DebugLocation(133, 3);
				PushFollow(Follow._function_call_in_plus_expression857);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:134:3: method_call
				{
				DebugLocation(134, 3);
				PushFollow(Follow._method_call_in_plus_expression861);
				method_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:135:3: property_call
				{
				DebugLocation(135, 3);
				PushFollow(Follow._property_call_in_plus_expression865);
				property_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:136:3: atom
				{
				DebugLocation(136, 3);
				PushFollow(Follow._atom_in_plus_expression869);
				atom();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			if (state.backtracking == 0)
			{
				 inExpression = false; 
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("plus_expression", 15);
			LeaveRule("plus_expression", 15);
			LeaveRule_plus_expression();
		}
		DebugLocation(137, 0);
		} finally { DebugExitRule(GrammarFileName, "plus_expression"); }
		return;

	}
	// $ANTLR end "plus_expression"

	partial void EnterRule_logic_expression();
	partial void LeaveRule_logic_expression();

	// $ANTLR start "logic_expression"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:139:1: logic_expression : ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression );
	[GrammarRule("logic_expression")]
	private void logic_expression()
	{
		EnterRule_logic_expression();
		EnterRule("logic_expression", 16);
		TraceIn("logic_expression", 16);
		try { DebugEnterRule(GrammarFileName, "logic_expression");
		DebugLocation(139, 1);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:140:2: ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression )
			int alt22=9;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case 47:
				{
				alt22 = 1;
				}
				break;
			case 51:
				{
				alt22 = 2;
				}
				break;
			case 48:
				{
				alt22 = 3;
				}
				break;
			case 52:
				{
				alt22 = 4;
				}
				break;
			case 50:
				{
				alt22 = 5;
				}
				break;
			case 36:
				{
				alt22 = 6;
				}
				break;
			case 57:
				{
				alt22 = 7;
				}
				break;
			case 62:
				{
				alt22 = 8;
				}
				break;
			case CALL:
			case FLOAT:
			case ID:
			case INDEX:
			case INT:
			case MCALL:
			case PCALL:
			case STRING:
			case 40:
			case 41:
			case 43:
			case 46:
				{
				alt22 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:140:6: ^( '<' plus_expression plus_expression )
				{
				DebugLocation(140, 6);
				DebugLocation(140, 8);
				Match(input,47,Follow._47_in_logic_expression882); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(140, 12);
				PushFollow(Follow._plus_expression_in_logic_expression884);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(140, 28);
				PushFollow(Follow._plus_expression_in_logic_expression886);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(140, 45);
				if (state.backtracking == 0)
				{
					emitter.EmitLessExp();
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:141:6: ^( '>' plus_expression plus_expression )
				{
				DebugLocation(141, 6);
				DebugLocation(141, 8);
				Match(input,51,Follow._51_in_logic_expression897); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(141, 12);
				PushFollow(Follow._plus_expression_in_logic_expression899);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(141, 28);
				PushFollow(Follow._plus_expression_in_logic_expression901);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(141, 45);
				if (state.backtracking == 0)
				{
					emitter.EmitGreaterExp();
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:142:6: ^( '<=' plus_expression plus_expression )
				{
				DebugLocation(142, 6);
				DebugLocation(142, 8);
				Match(input,48,Follow._48_in_logic_expression912); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(142, 13);
				PushFollow(Follow._plus_expression_in_logic_expression914);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(142, 29);
				PushFollow(Follow._plus_expression_in_logic_expression916);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(142, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitLessEqExp();
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:143:6: ^( '>=' plus_expression plus_expression )
				{
				DebugLocation(143, 6);
				DebugLocation(143, 8);
				Match(input,52,Follow._52_in_logic_expression927); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(143, 13);
				PushFollow(Follow._plus_expression_in_logic_expression929);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(143, 29);
				PushFollow(Follow._plus_expression_in_logic_expression931);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(143, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitGreaterEqExp();
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:144:6: ^( '==' plus_expression plus_expression )
				{
				DebugLocation(144, 6);
				DebugLocation(144, 8);
				Match(input,50,Follow._50_in_logic_expression942); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(144, 13);
				PushFollow(Follow._plus_expression_in_logic_expression944);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(144, 29);
				PushFollow(Follow._plus_expression_in_logic_expression946);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(144, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitEqualsExp();
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:145:6: ^( '!=' plus_expression plus_expression )
				{
				DebugLocation(145, 6);
				DebugLocation(145, 8);
				Match(input,36,Follow._36_in_logic_expression957); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(145, 13);
				PushFollow(Follow._plus_expression_in_logic_expression959);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(145, 29);
				PushFollow(Follow._plus_expression_in_logic_expression961);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(145, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitNotEqExp();
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:146:6: ^( 'e' plus_expression plus_expression )
				{
				DebugLocation(146, 6);
				DebugLocation(146, 8);
				Match(input,57,Follow._57_in_logic_expression972); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(146, 12);
				PushFollow(Follow._plus_expression_in_logic_expression974);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(146, 28);
				PushFollow(Follow._plus_expression_in_logic_expression976);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:147:6: ^( 'ou' plus_expression plus_expression )
				{
				DebugLocation(147, 6);
				DebugLocation(147, 8);
				Match(input,62,Follow._62_in_logic_expression985); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(147, 13);
				PushFollow(Follow._plus_expression_in_logic_expression987);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(147, 29);
				PushFollow(Follow._plus_expression_in_logic_expression989);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:148:4: plus_expression
				{
				DebugLocation(148, 4);
				PushFollow(Follow._plus_expression_in_logic_expression1001);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logic_expression", 16);
			LeaveRule("logic_expression", 16);
			LeaveRule_logic_expression();
		}
		DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expression"); }
		return;

	}
	// $ANTLR end "logic_expression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();

	// $ANTLR start "atom"
	// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:153:1: atom returns [object value] : (a= ID |a= INT |a= FLOAT |a= STRING );
	[GrammarRule("atom")]
	private object atom()
	{
		EnterRule_atom();
		EnterRule("atom", 17);
		TraceIn("atom", 17);
		object value = default(object);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(153, 4);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:153:27: (a= ID |a= INT |a= FLOAT |a= STRING )
			int alt23=4;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt23 = 1;
				}
				break;
			case INT:
				{
				alt23 = 2;
				}
				break;
			case FLOAT:
				{
				alt23 = 3;
				}
				break;
			case STRING:
				{
				alt23 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:154:7: a= ID
				{
				DebugLocation(154, 8);
				a=(CommonTree)Match(input,ID,Follow._ID_in_atom1029); if (state.failed) return value;
				DebugLocation(154, 12);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null); if (inExpression) emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:155:7: a= INT
				{
				DebugLocation(155, 8);
				a=(CommonTree)Match(input,INT,Follow._INT_in_atom1041); if (state.failed) return value;
				DebugLocation(155, 12);
				if (state.backtracking == 0)
				{
					value = int.Parse((a!=null?a.Text:null)); if (inExpression) emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:156:7: a= FLOAT
				{
				DebugLocation(156, 8);
				a=(CommonTree)Match(input,FLOAT,Follow._FLOAT_in_atom1052); if (state.failed) return value;
				DebugLocation(156, 14);
				if (state.backtracking == 0)
				{
					value = float.Parse((a!=null?a.Text:null)); if (inExpression) emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:157:7: a= STRING
				{
				DebugLocation(157, 8);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_atom1063); if (state.failed) return value;
				DebugLocation(157, 15);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null); if (inExpression) emitter.EmitPush(value, a.Token);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 17);
			LeaveRule("atom", 17);
			LeaveRule_atom();
		}
		DebugLocation(158, 4);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return value;

	}
	// $ANTLR end "atom"

	partial void EnterRule_synpred16_NPortugolWalker_fragment();
	partial void LeaveRule_synpred16_NPortugolWalker_fragment();

	// $ANTLR start synpred16_NPortugolWalker
	public void synpred16_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred16_NPortugolWalker_fragment();
		EnterRule("synpred16_NPortugolWalker_fragment", 33);
		TraceIn("synpred16_NPortugolWalker_fragment", 33);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:11: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:11: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(68, 11);
			DebugLocation(68, 13);
			Match(input,LOOP,Follow._LOOP_in_synpred16_NPortugolWalker276); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(68, 19);
			PushFollow(Follow._assign_var_in_synpred16_NPortugolWalker280);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(68, 58);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred16_NPortugolWalker286); if (state.failed) return;
			DebugLocation(68, 63);
			DebugLocation(68, 65);
			Match(input,SLIST,Follow._SLIST_in_synpred16_NPortugolWalker289); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 111);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:111: ( statement )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if (((LA25_0>=ASGN && LA25_0<=CALL)||LA25_0==JMP||LA25_0==LOOP||(LA25_0>=RET && LA25_0<=SJMP)||LA25_0==VAR))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:111: statement
						{
						DebugLocation(68, 111);
						PushFollow(Follow._statement_in_synpred16_NPortugolWalker294);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred16_NPortugolWalker_fragment", 33);
			LeaveRule("synpred16_NPortugolWalker_fragment", 33);
			LeaveRule_synpred16_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred16_NPortugolWalker

	partial void EnterRule_synpred18_NPortugolWalker_fragment();
	partial void LeaveRule_synpred18_NPortugolWalker_fragment();

	// $ANTLR start synpred18_NPortugolWalker
	public void synpred18_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred18_NPortugolWalker_fragment();
		EnterRule("synpred18_NPortugolWalker_fragment", 35);
		TraceIn("synpred18_NPortugolWalker_fragment", 35);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:4: ( ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(69, 4);
			DebugLocation(69, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred18_NPortugolWalker307); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(69, 11);
			Match(input,DEC,Follow._DEC_in_synpred18_NPortugolWalker309); if (state.failed) return;
			DebugLocation(69, 16);
			PushFollow(Follow._assign_var_in_synpred18_NPortugolWalker313);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(69, 55);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred18_NPortugolWalker319); if (state.failed) return;
			DebugLocation(69, 60);
			DebugLocation(69, 62);
			Match(input,SLIST,Follow._SLIST_in_synpred18_NPortugolWalker322); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(69, 108);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:108: ( statement )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if (((LA26_0>=ASGN && LA26_0<=CALL)||LA26_0==JMP||LA26_0==LOOP||(LA26_0>=RET && LA26_0<=SJMP)||LA26_0==VAR))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:108: statement
						{
						DebugLocation(69, 108);
						PushFollow(Follow._statement_in_synpred18_NPortugolWalker326);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred18_NPortugolWalker_fragment", 35);
			LeaveRule("synpred18_NPortugolWalker_fragment", 35);
			LeaveRule_synpred18_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred18_NPortugolWalker

	partial void EnterRule_synpred20_NPortugolWalker_fragment();
	partial void LeaveRule_synpred20_NPortugolWalker_fragment();

	// $ANTLR start synpred20_NPortugolWalker
	public void synpred20_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred20_NPortugolWalker_fragment();
		EnterRule("synpred20_NPortugolWalker_fragment", 37);
		TraceIn("synpred20_NPortugolWalker_fragment", 37);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:4: ( ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
			{
			DebugLocation(70, 4);
			DebugLocation(70, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred20_NPortugolWalker338); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(70, 12);
			PushFollow(Follow._assign_var_in_synpred20_NPortugolWalker342);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(70, 51);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred20_NPortugolWalker348); if (state.failed) return;
			DebugLocation(70, 55);
			DebugLocation(70, 57);
			Match(input,SLIST,Follow._SLIST_in_synpred20_NPortugolWalker351); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(70, 103);
				// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: ( statement )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if (((LA27_0>=ASGN && LA27_0<=CALL)||LA27_0==JMP||LA27_0==LOOP||(LA27_0>=RET && LA27_0<=SJMP)||LA27_0==VAR))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: statement
						{
						DebugLocation(70, 103);
						PushFollow(Follow._statement_in_synpred20_NPortugolWalker356);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred20_NPortugolWalker_fragment", 37);
			LeaveRule("synpred20_NPortugolWalker_fragment", 37);
			LeaveRule_synpred20_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred20_NPortugolWalker

	partial void EnterRule_synpred25_NPortugolWalker_fragment();
	partial void LeaveRule_synpred25_NPortugolWalker_fragment();

	// $ANTLR start synpred25_NPortugolWalker
	public void synpred25_NPortugolWalker_fragment()
	{
		object a = default(object);

		EnterRule_synpred25_NPortugolWalker_fragment();
		EnterRule("synpred25_NPortugolWalker_fragment", 42);
		TraceIn("synpred25_NPortugolWalker_fragment", 42);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:107:7: ( ^( ASGN ID a= atom ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:107:7: ^( ASGN ID a= atom )
			{
			DebugLocation(107, 7);
			DebugLocation(107, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred25_NPortugolWalker543); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(107, 14);
			Match(input,ID,Follow._ID_in_synpred25_NPortugolWalker545); if (state.failed) return;
			DebugLocation(107, 18);
			PushFollow(Follow._atom_in_synpred25_NPortugolWalker549);
			a=atom();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred25_NPortugolWalker_fragment", 42);
			LeaveRule("synpred25_NPortugolWalker_fragment", 42);
			LeaveRule_synpred25_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred25_NPortugolWalker

	partial void EnterRule_synpred26_NPortugolWalker_fragment();
	partial void LeaveRule_synpred26_NPortugolWalker_fragment();

	// $ANTLR start synpred26_NPortugolWalker
	public void synpred26_NPortugolWalker_fragment()
	{
		EnterRule_synpred26_NPortugolWalker_fragment();
		EnterRule("synpred26_NPortugolWalker_fragment", 43);
		TraceIn("synpred26_NPortugolWalker_fragment", 43);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:7: ( ^( ASGN ^( AR INT ) ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:7: ^( ASGN ^( AR INT ) ID plus_expression )
			{
			DebugLocation(108, 7);
			DebugLocation(108, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred26_NPortugolWalker561); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(108, 14);
			DebugLocation(108, 16);
			Match(input,AR,Follow._AR_in_synpred26_NPortugolWalker564); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(108, 19);
			Match(input,INT,Follow._INT_in_synpred26_NPortugolWalker566); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(108, 24);
			Match(input,ID,Follow._ID_in_synpred26_NPortugolWalker569); if (state.failed) return;
			DebugLocation(108, 27);
			PushFollow(Follow._plus_expression_in_synpred26_NPortugolWalker571);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred26_NPortugolWalker_fragment", 43);
			LeaveRule("synpred26_NPortugolWalker_fragment", 43);
			LeaveRule_synpred26_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred26_NPortugolWalker

	partial void EnterRule_synpred27_NPortugolWalker_fragment();
	partial void LeaveRule_synpred27_NPortugolWalker_fragment();

	// $ANTLR start synpred27_NPortugolWalker
	public void synpred27_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);

		EnterRule_synpred27_NPortugolWalker_fragment();
		EnterRule("synpred27_NPortugolWalker_fragment", 44);
		TraceIn("synpred27_NPortugolWalker_fragment", 44);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:109:7: ( ^( ASGN ^( AR i= ID ) p= ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:109:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
			{
			DebugLocation(109, 7);
			DebugLocation(109, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred27_NPortugolWalker589); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(109, 14);
			DebugLocation(109, 16);
			Match(input,AR,Follow._AR_in_synpred27_NPortugolWalker592); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(109, 20);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred27_NPortugolWalker596); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(109, 26);
			p=(CommonTree)Match(input,ID,Follow._ID_in_synpred27_NPortugolWalker601); if (state.failed) return;
			DebugLocation(109, 30);
			PushFollow(Follow._plus_expression_in_synpred27_NPortugolWalker603);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred27_NPortugolWalker_fragment", 44);
			LeaveRule("synpred27_NPortugolWalker_fragment", 44);
			LeaveRule_synpred27_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred27_NPortugolWalker

	partial void EnterRule_synpred28_NPortugolWalker_fragment();
	partial void LeaveRule_synpred28_NPortugolWalker_fragment();

	// $ANTLR start synpred28_NPortugolWalker
	public void synpred28_NPortugolWalker_fragment()
	{
		EnterRule_synpred28_NPortugolWalker_fragment();
		EnterRule("synpred28_NPortugolWalker_fragment", 45);
		TraceIn("synpred28_NPortugolWalker_fragment", 45);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:110:7: ( ^( ASGN ID plus_expression ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:110:7: ^( ASGN ID plus_expression )
			{
			DebugLocation(110, 7);
			DebugLocation(110, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred28_NPortugolWalker625); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(110, 14);
			Match(input,ID,Follow._ID_in_synpred28_NPortugolWalker627); if (state.failed) return;
			DebugLocation(110, 17);
			PushFollow(Follow._plus_expression_in_synpred28_NPortugolWalker629);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred28_NPortugolWalker_fragment", 45);
			LeaveRule("synpred28_NPortugolWalker_fragment", 45);
			LeaveRule_synpred28_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred28_NPortugolWalker

	partial void EnterRule_synpred29_NPortugolWalker_fragment();
	partial void LeaveRule_synpred29_NPortugolWalker_fragment();

	// $ANTLR start synpred29_NPortugolWalker
	public void synpred29_NPortugolWalker_fragment()
	{
		EnterRule_synpred29_NPortugolWalker_fragment();
		EnterRule("synpred29_NPortugolWalker_fragment", 46);
		TraceIn("synpred29_NPortugolWalker_fragment", 46);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:111:7: ( ^( ASGN ID 'nulo' ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:111:7: ^( ASGN ID 'nulo' )
			{
			DebugLocation(111, 7);
			DebugLocation(111, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred29_NPortugolWalker642); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(111, 14);
			Match(input,ID,Follow._ID_in_synpred29_NPortugolWalker644); if (state.failed) return;
			DebugLocation(111, 17);
			Match(input,72,Follow._72_in_synpred29_NPortugolWalker646); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred29_NPortugolWalker_fragment", 46);
			LeaveRule("synpred29_NPortugolWalker_fragment", 46);
			LeaveRule_synpred29_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred29_NPortugolWalker

	partial void EnterRule_synpred30_NPortugolWalker_fragment();
	partial void LeaveRule_synpred30_NPortugolWalker_fragment();

	// $ANTLR start synpred30_NPortugolWalker
	public void synpred30_NPortugolWalker_fragment()
	{
		EnterRule_synpred30_NPortugolWalker_fragment();
		EnterRule("synpred30_NPortugolWalker_fragment", 47);
		TraceIn("synpred30_NPortugolWalker_fragment", 47);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:112:7: ( ^( ASGN ID 'falso' ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:112:7: ^( ASGN ID 'falso' )
			{
			DebugLocation(112, 7);
			DebugLocation(112, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred30_NPortugolWalker659); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(112, 14);
			Match(input,ID,Follow._ID_in_synpred30_NPortugolWalker661); if (state.failed) return;
			DebugLocation(112, 17);
			Match(input,71,Follow._71_in_synpred30_NPortugolWalker663); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred30_NPortugolWalker_fragment", 47);
			LeaveRule("synpred30_NPortugolWalker_fragment", 47);
			LeaveRule_synpred30_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred30_NPortugolWalker

	partial void EnterRule_synpred31_NPortugolWalker_fragment();
	partial void LeaveRule_synpred31_NPortugolWalker_fragment();

	// $ANTLR start synpred31_NPortugolWalker
	public void synpred31_NPortugolWalker_fragment()
	{
		EnterRule_synpred31_NPortugolWalker_fragment();
		EnterRule("synpred31_NPortugolWalker_fragment", 48);
		TraceIn("synpred31_NPortugolWalker_fragment", 48);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:113:7: ( ^( ASGN ID 'verdadeiro' ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:113:7: ^( ASGN ID 'verdadeiro' )
			{
			DebugLocation(113, 7);
			DebugLocation(113, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred31_NPortugolWalker676); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(113, 14);
			Match(input,ID,Follow._ID_in_synpred31_NPortugolWalker678); if (state.failed) return;
			DebugLocation(113, 17);
			Match(input,73,Follow._73_in_synpred31_NPortugolWalker680); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred31_NPortugolWalker_fragment", 48);
			LeaveRule("synpred31_NPortugolWalker_fragment", 48);
			LeaveRule_synpred31_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred31_NPortugolWalker

	partial void EnterRule_synpred32_NPortugolWalker_fragment();
	partial void LeaveRule_synpred32_NPortugolWalker_fragment();

	// $ANTLR start synpred32_NPortugolWalker
	public void synpred32_NPortugolWalker_fragment()
	{
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);

		EnterRule_synpred32_NPortugolWalker_fragment();
		EnterRule("synpred32_NPortugolWalker_fragment", 49);
		TraceIn("synpred32_NPortugolWalker_fragment", 49);
		try
		{
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:114:7: ( ^( ASGN ID l= INT r= INT ) )
			DebugEnterAlt(1);
			// E:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:114:7: ^( ASGN ID l= INT r= INT )
			{
			DebugLocation(114, 7);
			DebugLocation(114, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred32_NPortugolWalker701); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(114, 14);
			Match(input,ID,Follow._ID_in_synpred32_NPortugolWalker703); if (state.failed) return;
			DebugLocation(114, 18);
			l=(CommonTree)Match(input,INT,Follow._INT_in_synpred32_NPortugolWalker707); if (state.failed) return;
			DebugLocation(114, 24);
			r=(CommonTree)Match(input,INT,Follow._INT_in_synpred32_NPortugolWalker711); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred32_NPortugolWalker_fragment", 49);
			LeaveRule("synpred32_NPortugolWalker_fragment", 49);
			LeaveRule_synpred32_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred32_NPortugolWalker
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declare_function_in_script62 = new BitSet(new ulong[]{0x4002UL});
		public static readonly BitSet _FUNC_in_declare_function76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_declare_function78 = new BitSet(new ulong[]{0x88000000UL});
		public static readonly BitSet _function_param_list_in_declare_function80 = new BitSet(new ulong[]{0x88000000UL});
		public static readonly BitSet _SLIST_in_declare_function84 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_declare_function86 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _declare_local_in_statement102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_stat_in_statement107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_stat_in_statement113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_statement118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_var_in_statement124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_stat_in_statement129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARAM_in_function_param_list149 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_param_list153 = new BitSet(new ulong[]{0x10008UL});
		public static readonly BitSet _VAR_in_declare_local172 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_declare_local176 = new BitSet(new ulong[]{0x10008UL});
		public static readonly BitSet _SJMP_in_if_stat196 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat199 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat201 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat205 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat207 = new BitSet(new ulong[]{0x4E0A000C0UL});
		public static readonly BitSet _senao_stat_in_if_stat212 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _JMP_in_if_stat221 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat224 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat226 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat230 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat232 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _SLIST_in_senao_stat251 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_senao_stat253 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _LOOP_in_for_stat276 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat280 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_for_stat286 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _SLIST_in_for_stat289 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat294 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _LOOP_in_for_stat307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat309 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat313 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_for_stat319 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _SLIST_in_for_stat322 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat326 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _LOOP_in_for_stat338 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat342 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _ID_in_for_stat348 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _SLIST_in_for_stat351 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat356 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _LOOP_in_for_stat369 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat371 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat375 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _ID_in_for_stat381 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _SLIST_in_for_stat384 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat388 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _CALL_in_function_call417 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_call419 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_function_call421 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _PCALL_in_property_call442 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_property_call446 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _ID_in_property_call450 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MCALL_in_method_call475 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_method_call479 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _ID_in_method_call483 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_method_call485 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _ARG_in_function_arg_list512 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_function_arg_list514 = new BitSet(new ulong[]{0x4B0111152088UL});
		public static readonly BitSet _ASGN_in_assign_var543 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var545 = new BitSet(new ulong[]{0x100112000UL});
		public static readonly BitSet _atom_in_assign_var549 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var561 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var564 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var566 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var569 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_assign_var571 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var589 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var592 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var596 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var601 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_assign_var603 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var625 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var627 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_assign_var629 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var642 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var644 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_assign_var646 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var659 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var661 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_assign_var663 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var676 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var678 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _73_in_assign_var680 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var701 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var703 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_assign_var707 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_assign_var711 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var723 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var725 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ILIST_in_assign_var728 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var732 = new BitSet(new ulong[]{0x100008UL});
		public static readonly BitSet _RET_in_return_stat755 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_return_stat757 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _41_in_plus_expression782 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression784 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_plus_expression786 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _43_in_plus_expression794 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression796 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_plus_expression798 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _40_in_plus_expression806 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression808 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_plus_expression810 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _46_in_plus_expression818 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression820 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_plus_expression822 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDEX_in_plus_expression830 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_plus_expression832 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEX_in_plus_expression842 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_plus_expression846 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_plus_expression857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _method_call_in_plus_expression861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_call_in_plus_expression865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_plus_expression869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_logic_expression882 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression884 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_logic_expression886 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _51_in_logic_expression897 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression899 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_logic_expression901 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _48_in_logic_expression912 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression914 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_logic_expression916 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _52_in_logic_expression927 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression929 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_logic_expression931 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _50_in_logic_expression942 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression944 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_logic_expression946 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _36_in_logic_expression957 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression959 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_logic_expression961 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _57_in_logic_expression972 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression974 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_logic_expression976 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _62_in_logic_expression985 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression987 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_logic_expression989 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _plus_expression_in_logic_expression1001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom1029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_atom1041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_atom1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom1063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOOP_in_synpred16_NPortugolWalker276 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred16_NPortugolWalker280 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_synpred16_NPortugolWalker286 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _SLIST_in_synpred16_NPortugolWalker289 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred16_NPortugolWalker294 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _LOOP_in_synpred18_NPortugolWalker307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_synpred18_NPortugolWalker309 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_synpred18_NPortugolWalker313 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_synpred18_NPortugolWalker319 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _SLIST_in_synpred18_NPortugolWalker322 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred18_NPortugolWalker326 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _LOOP_in_synpred20_NPortugolWalker338 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred20_NPortugolWalker342 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _ID_in_synpred20_NPortugolWalker348 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _SLIST_in_synpred20_NPortugolWalker351 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred20_NPortugolWalker356 = new BitSet(new ulong[]{0x460A000C8UL});
		public static readonly BitSet _ASGN_in_synpred25_NPortugolWalker543 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred25_NPortugolWalker545 = new BitSet(new ulong[]{0x100112000UL});
		public static readonly BitSet _atom_in_synpred25_NPortugolWalker549 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred26_NPortugolWalker561 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred26_NPortugolWalker564 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_synpred26_NPortugolWalker566 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred26_NPortugolWalker569 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_synpred26_NPortugolWalker571 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred27_NPortugolWalker589 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred27_NPortugolWalker592 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred27_NPortugolWalker596 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred27_NPortugolWalker601 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_synpred27_NPortugolWalker603 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred28_NPortugolWalker625 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred28_NPortugolWalker627 = new BitSet(new ulong[]{0x4B0111152080UL});
		public static readonly BitSet _plus_expression_in_synpred28_NPortugolWalker629 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred29_NPortugolWalker642 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred29_NPortugolWalker644 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_synpred29_NPortugolWalker646 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred30_NPortugolWalker659 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred30_NPortugolWalker661 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_synpred30_NPortugolWalker663 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred31_NPortugolWalker676 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred31_NPortugolWalker678 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _73_in_synpred31_NPortugolWalker680 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred32_NPortugolWalker701 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred32_NPortugolWalker703 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_synpred32_NPortugolWalker707 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INT_in_synpred32_NPortugolWalker711 = new BitSet(new ulong[]{0x8UL});
	}
	#endregion Follow sets
}

} // namespace PSharp.Compiler
