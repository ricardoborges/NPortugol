//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g 2014-04-15 15:22:32

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

using System.Collections;

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace NPortugol
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class NPortugolWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AR", "ARG", "ASGN", "ASM", "CALL", "CHAR", "DEC", "ESC_SEQ", "EXP", "EXPONENT", "F", "FLOAT", "FUNC", "HEX_DIGIT", "ID", "ILIST", "INDEX", "INIT", "INT", "JMP", "LEXP", "LOOP", "MCALL", "NEWLINE", "OCTAL_ESC", "PARAM", "PCALL", "RET", "SJMP", "SLIST", "STRING", "T", "UNICODE_ESC", "VAR", "WS", "'!='", "'#'", "'%'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'..'", "'/'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'até'", "'decrescente'", "'e'", "'enquanto'", "'então'", "'fim'", "'função'", "'ou'", "'para'", "'repita'", "'retorne'", "'se'", "'senão'", "'variável'", "'{'", "'}'", "'falso'", "'nulo'", "'verdadeiro'"
	};
	public const int EOF=-1;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int AR=4;
	public const int ARG=5;
	public const int ASGN=6;
	public const int ASM=7;
	public const int CALL=8;
	public const int CHAR=9;
	public const int DEC=10;
	public const int ESC_SEQ=11;
	public const int EXP=12;
	public const int EXPONENT=13;
	public const int F=14;
	public const int FLOAT=15;
	public const int FUNC=16;
	public const int HEX_DIGIT=17;
	public const int ID=18;
	public const int ILIST=19;
	public const int INDEX=20;
	public const int INIT=21;
	public const int INT=22;
	public const int JMP=23;
	public const int LEXP=24;
	public const int LOOP=25;
	public const int MCALL=26;
	public const int NEWLINE=27;
	public const int OCTAL_ESC=28;
	public const int PARAM=29;
	public const int PCALL=30;
	public const int RET=31;
	public const int SJMP=32;
	public const int SLIST=33;
	public const int STRING=34;
	public const int T=35;
	public const int UNICODE_ESC=36;
	public const int VAR=37;
	public const int WS=38;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;

	public NPortugolWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public NPortugolWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return NPortugolWalker.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g"; } }


		Emissor emitter = new Emissor();
		
		bool inExpression;
		
		bool invertExp = true;
		
		public Dictionary<int, int> SourceMap { get { return emitter.SourceMap; } }
		
		public bool DebugInfo {get {return emitter.DebugInfo;} set{emitter.DebugInfo = value;} }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:27:8: public script returns [IList<string> scriptLines] : ( declare_function )* ;
	[GrammarRule("script")]
	public IList<string> script()
	{
		EnterRule_script();
		EnterRule("script", 1);
		TraceIn("script", 1);
		IList<string> scriptLines = default(IList<string>);


		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(27, 0);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:27:50: ( ( declare_function )* )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:27:52: ( declare_function )*
			{
			DebugLocation(27, 52);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:27:52: ( declare_function )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==FUNC))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:27:52: declare_function
					{
					DebugLocation(27, 52);
					PushFollow(Follow._declare_function_in_script62);
					declare_function();
					PopFollow();
					if (state.failed) return scriptLines;

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(28, 2);
			if (state.backtracking == 0)
			{
				 return emitter.ScriptLines;
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("script", 1);
			LeaveRule("script", 1);
			LeaveRule_script();
		}
		DebugLocation(29, 0);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return scriptLines;

	}
	// $ANTLR end "script"

	partial void EnterRule_declare_function();
	partial void LeaveRule_declare_function();

	// $ANTLR start "declare_function"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:31:1: declare_function : ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) ) ;
	[GrammarRule("declare_function")]
	private void declare_function()
	{
		EnterRule_declare_function();
		EnterRule("declare_function", 2);
		TraceIn("declare_function", 2);
		CommonTree ID1 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "declare_function");
		DebugLocation(31, 0);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:31:18: ( ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:31:20: ^( FUNC ID ( function_param_list )* ^( SLIST ( statement )* ) )
			{
			DebugLocation(31, 20);
			DebugLocation(31, 22);
			Match(input,FUNC,Follow._FUNC_in_declare_function76); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(31, 27);
			ID1=(CommonTree)Match(input,ID,Follow._ID_in_declare_function78); if (state.failed) return;
			DebugLocation(31, 30);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:31:30: ( function_param_list )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==PARAM))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:31:30: function_param_list
					{
					DebugLocation(31, 30);
					PushFollow(Follow._function_param_list_in_declare_function80);
					function_param_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(31, 51);
			DebugLocation(31, 53);
			Match(input,SLIST,Follow._SLIST_in_declare_function84); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(31, 59);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:31:59: ( statement )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>=ASGN && LA3_0<=CALL)||LA3_0==JMP||LA3_0==LOOP||(LA3_0>=RET && LA3_0<=SJMP)||LA3_0==VAR))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:31:59: statement
						{
						DebugLocation(31, 59);
						PushFollow(Follow._statement_in_declare_function86);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(32, 2);
			if (state.backtracking == 0)
			{
				emitter.EmitFunction(ID1.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_function", 2);
			LeaveRule("declare_function", 2);
			LeaveRule_declare_function();
		}
		DebugLocation(33, 0);
		} finally { DebugExitRule(GrammarFileName, "declare_function"); }
		return;

	}
	// $ANTLR end "declare_function"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:35:1: statement : ( declare_local | if_stat | for_stat | while_stat | repeat_stat | function_call | assign_var | return_stat | asm_code );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(35, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:35:10: ( declare_local | if_stat | for_stat | while_stat | repeat_stat | function_call | assign_var | return_stat | asm_code )
			int alt4=9;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt4 = 1;
				}
				break;
			case JMP:
			case SJMP:
				{
				alt4 = 2;
				}
				break;
			case LOOP:
				{
				int LA4_4 = input.LA(2);

				if ((LA4_4==DOWN))
				{
					switch (input.LA(3))
					{
					case ASGN:
					case DEC:
						{
						alt4 = 3;
						}
						break;
					case LEXP:
						{
						alt4 = 4;
						}
						break;
					case SLIST:
						{
						alt4 = 5;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 4, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 4, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CALL:
				{
				alt4 = 6;
				}
				break;
			case ASGN:
				{
				alt4 = 7;
				}
				break;
			case RET:
				{
				alt4 = 8;
				}
				break;
			case ASM:
				{
				alt4 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:35:12: declare_local
				{
				DebugLocation(35, 12);
				PushFollow(Follow._declare_local_in_statement103);
				declare_local();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:36:4: if_stat
				{
				DebugLocation(36, 4);
				PushFollow(Follow._if_stat_in_statement108);
				if_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:37:4: for_stat
				{
				DebugLocation(37, 4);
				PushFollow(Follow._for_stat_in_statement114);
				for_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:38:4: while_stat
				{
				DebugLocation(38, 4);
				PushFollow(Follow._while_stat_in_statement119);
				while_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:39:4: repeat_stat
				{
				DebugLocation(39, 4);
				PushFollow(Follow._repeat_stat_in_statement124);
				repeat_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:40:4: function_call
				{
				DebugLocation(40, 4);
				PushFollow(Follow._function_call_in_statement129);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:41:4: assign_var
				{
				DebugLocation(41, 4);
				PushFollow(Follow._assign_var_in_statement135);
				assign_var();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:42:4: return_stat
				{
				DebugLocation(42, 4);
				PushFollow(Follow._return_stat_in_statement140);
				return_stat();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:43:4: asm_code
				{
				DebugLocation(43, 4);
				PushFollow(Follow._asm_code_in_statement145);
				asm_code();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	partial void EnterRule_function_param_list();
	partial void LeaveRule_function_param_list();

	// $ANTLR start "function_param_list"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:47:1: function_param_list : ^( PARAM (p+= ID )* ) ;
	[GrammarRule("function_param_list")]
	private void function_param_list()
	{
		EnterRule_function_param_list();
		EnterRule("function_param_list", 4);
		TraceIn("function_param_list", 4);
		CommonTree p = default(CommonTree);
		List<CommonTree> list_p = null;

		try { DebugEnterRule(GrammarFileName, "function_param_list");
		DebugLocation(47, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:48:2: ( ^( PARAM (p+= ID )* ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:48:5: ^( PARAM (p+= ID )* )
			{
			DebugLocation(48, 5);
			DebugLocation(48, 7);
			Match(input,PARAM,Follow._PARAM_in_function_param_list165); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(48, 14);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:48:14: (p+= ID )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==ID))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:48:14: p+= ID
						{
						DebugLocation(48, 14);
						p=(CommonTree)Match(input,ID,Follow._ID_in_function_param_list169); if (state.failed) return;
						if (list_p==null) list_p=new List<CommonTree>();
						list_p.Add(p);


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(48, 21);
			if (state.backtracking == 0)
			{
				 foreach(var item in list_p) emitter.AddParam(item.Text); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_param_list", 4);
			LeaveRule("function_param_list", 4);
			LeaveRule_function_param_list();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "function_param_list"); }
		return;

	}
	// $ANTLR end "function_param_list"

	partial void EnterRule_declare_local();
	partial void LeaveRule_declare_local();

	// $ANTLR start "declare_local"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:51:1: declare_local : ^( VAR (i+= ID )* ) ;
	[GrammarRule("declare_local")]
	private void declare_local()
	{
		EnterRule_declare_local();
		EnterRule("declare_local", 5);
		TraceIn("declare_local", 5);
		CommonTree i = default(CommonTree);
		List<CommonTree> list_i = null;

		try { DebugEnterRule(GrammarFileName, "declare_local");
		DebugLocation(51, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:52:2: ( ^( VAR (i+= ID )* ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:52:5: ^( VAR (i+= ID )* )
			{
			DebugLocation(52, 5);
			DebugLocation(52, 7);
			Match(input,VAR,Follow._VAR_in_declare_local188); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(52, 12);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:52:12: (i+= ID )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==ID))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:52:12: i+= ID
						{
						DebugLocation(52, 12);
						i=(CommonTree)Match(input,ID,Follow._ID_in_declare_local192); if (state.failed) return;
						if (list_i==null) list_i=new List<CommonTree>();
						list_i.Add(i);


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(52, 20);
			if (state.backtracking == 0)
			{
				 foreach(var item in list_i) emitter.EmitVar(item.Token); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declare_local", 5);
			LeaveRule("declare_local", 5);
			LeaveRule_declare_local();
		}
		DebugLocation(53, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_local"); }
		return;

	}
	// $ANTLR end "declare_local"

	partial void EnterRule_if_stat();
	partial void LeaveRule_if_stat();

	// $ANTLR start "if_stat"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:55:1: if_stat : ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) );
	[GrammarRule("if_stat")]
	private void if_stat()
	{
		EnterRule_if_stat();
		EnterRule("if_stat", 6);
		TraceIn("if_stat", 6);
		try { DebugEnterRule(GrammarFileName, "if_stat");
		DebugLocation(55, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:56:2: ( ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) ) | ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==SJMP))
			{
				alt9 = 1;
			}
			else if ((LA9_0==JMP))
			{
				alt9 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:56:5: ^( SJMP ^( LEXP logic_expression ) ^( SLIST ( statement )* senao_stat ) )
				{
				DebugLocation(56, 5);
				DebugLocation(56, 7);
				Match(input,SJMP,Follow._SJMP_in_if_stat210); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(56, 12);
				DebugLocation(56, 14);
				Match(input,LEXP,Follow._LEXP_in_if_stat213); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(56, 19);
				PushFollow(Follow._logic_expression_in_if_stat215);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(56, 37);
				DebugLocation(56, 39);
				Match(input,SLIST,Follow._SLIST_in_if_stat219); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(56, 45);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:56:45: ( statement )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>=ASGN && LA7_0<=CALL)||LA7_0==JMP||LA7_0==LOOP||(LA7_0>=RET && LA7_0<=SJMP)||LA7_0==VAR))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:56:45: statement
						{
						DebugLocation(56, 45);
						PushFollow(Follow._statement_in_if_stat221);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(56, 56);
				if (state.backtracking == 0)
				{
					emitter.EmitIf(true);
				}
				DebugLocation(56, 80);
				PushFollow(Follow._senao_stat_in_if_stat226);
				senao_stat();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:57:5: ^( JMP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) )
				{
				DebugLocation(57, 5);
				DebugLocation(57, 7);
				Match(input,JMP,Follow._JMP_in_if_stat235); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(57, 11);
				DebugLocation(57, 13);
				Match(input,LEXP,Follow._LEXP_in_if_stat238); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(57, 18);
				PushFollow(Follow._logic_expression_in_if_stat240);
				logic_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(57, 36);
				DebugLocation(57, 38);
				Match(input,SLIST,Follow._SLIST_in_if_stat244); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(57, 44);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:57:44: ( statement )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if (((LA8_0>=ASGN && LA8_0<=CALL)||LA8_0==JMP||LA8_0==LOOP||(LA8_0>=RET && LA8_0<=SJMP)||LA8_0==VAR))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:57:44: statement
							{
							DebugLocation(57, 44);
							PushFollow(Follow._statement_in_if_stat246);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(58, 2);
				if (state.backtracking == 0)
				{
					emitter.EmitIf(false);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("if_stat", 6);
			LeaveRule("if_stat", 6);
			LeaveRule_if_stat();
		}
		DebugLocation(59, 1);
		} finally { DebugExitRule(GrammarFileName, "if_stat"); }
		return;

	}
	// $ANTLR end "if_stat"

	partial void EnterRule_senao_stat();
	partial void LeaveRule_senao_stat();

	// $ANTLR start "senao_stat"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:61:1: senao_stat : ^( SLIST ( statement )* ) ;
	[GrammarRule("senao_stat")]
	private void senao_stat()
	{
		EnterRule_senao_stat();
		EnterRule("senao_stat", 7);
		TraceIn("senao_stat", 7);
		try { DebugEnterRule(GrammarFileName, "senao_stat");
		DebugLocation(61, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:62:2: ( ^( SLIST ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:62:4: ^( SLIST ( statement )* )
			{
			DebugLocation(62, 4);
			DebugLocation(62, 6);
			Match(input,SLIST,Follow._SLIST_in_senao_stat265); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(62, 12);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:62:12: ( statement )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if (((LA10_0>=ASGN && LA10_0<=CALL)||LA10_0==JMP||LA10_0==LOOP||(LA10_0>=RET && LA10_0<=SJMP)||LA10_0==VAR))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:62:12: statement
						{
						DebugLocation(62, 12);
						PushFollow(Follow._statement_in_senao_stat267);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(63, 5);
			if (state.backtracking == 0)
			{
				emitter.EmitElse();
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("senao_stat", 7);
			LeaveRule("senao_stat", 7);
			LeaveRule_senao_stat();
		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "senao_stat"); }
		return;

	}
	// $ANTLR end "senao_stat"

	partial void EnterRule_for_stat();
	partial void LeaveRule_for_stat();

	// $ANTLR start "for_stat"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:67:1: for_stat : ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) );
	[GrammarRule("for_stat")]
	private void for_stat()
	{
		EnterRule_for_stat();
		EnterRule("for_stat", 8);
		TraceIn("for_stat", 8);
		CommonTree i = default(CommonTree);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "for_stat");
		DebugLocation(67, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:3: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) | ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) | ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			int alt15=4;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==LOOP))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==DOWN))
				{
					int LA15_2 = input.LA(3);

					if ((LA15_2==DEC))
					{
						int LA15_3 = input.LA(4);

						if ((EvaluatePredicate(synpred21_NPortugolWalker_fragment)))
						{
							alt15 = 2;
						}
						else if ((true))
						{
							alt15 = 4;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 15, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA15_2==ASGN))
					{
						int LA15_4 = input.LA(4);

						if ((EvaluatePredicate(synpred19_NPortugolWalker_fragment)))
						{
							alt15 = 1;
						}
						else if ((EvaluatePredicate(synpred23_NPortugolWalker_fragment)))
						{
							alt15 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 15, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 15, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:3: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(68, 3);
				DebugLocation(68, 5);
				Match(input,LOOP,Follow._LOOP_in_for_stat291); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 11);
				PushFollow(Follow._assign_var_in_for_stat295);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(68, 23);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(68, 50);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat301); if (state.failed) return;
				DebugLocation(68, 55);
				DebugLocation(68, 57);
				Match(input,SLIST,Follow._SLIST_in_for_stat304); if (state.failed) return;

				DebugLocation(68, 64);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, true);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(68, 103);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:103: ( statement )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if (((LA11_0>=ASGN && LA11_0<=CALL)||LA11_0==JMP||LA11_0==LOOP||(LA11_0>=RET && LA11_0<=SJMP)||LA11_0==VAR))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:103: statement
							{
							DebugLocation(68, 103);
							PushFollow(Follow._statement_in_for_stat309);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(68, 118);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, true);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
				{
				DebugLocation(69, 4);
				DebugLocation(69, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat322); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(69, 11);
				Match(input,DEC,Follow._DEC_in_for_stat324); if (state.failed) return;
				DebugLocation(69, 16);
				PushFollow(Follow._assign_var_in_for_stat328);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(69, 28);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(69, 55);
				i=(CommonTree)Match(input,INT,Follow._INT_in_for_stat334); if (state.failed) return;
				DebugLocation(69, 60);
				DebugLocation(69, 62);
				Match(input,SLIST,Follow._SLIST_in_for_stat337); if (state.failed) return;

				DebugLocation(69, 68);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, false);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(69, 108);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:108: ( statement )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if (((LA12_0>=ASGN && LA12_0<=CALL)||LA12_0==JMP||LA12_0==LOOP||(LA12_0>=RET && LA12_0<=SJMP)||LA12_0==VAR))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:108: statement
							{
							DebugLocation(69, 108);
							PushFollow(Follow._statement_in_for_stat341);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(69, 122);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, false);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(70, 4);
				DebugLocation(70, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat353); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(70, 12);
				PushFollow(Follow._assign_var_in_for_stat357);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(70, 24);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(70, 51);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat363); if (state.failed) return;
				DebugLocation(70, 55);
				DebugLocation(70, 57);
				Match(input,SLIST,Follow._SLIST_in_for_stat366); if (state.failed) return;

				DebugLocation(70, 64);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, true);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(70, 103);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: ( statement )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if (((LA13_0>=ASGN && LA13_0<=CALL)||LA13_0==JMP||LA13_0==LOOP||(LA13_0>=RET && LA13_0<=SJMP)||LA13_0==VAR))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: statement
							{
							DebugLocation(70, 103);
							PushFollow(Follow._statement_in_for_stat371);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(70, 118);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, true);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:4: ^( LOOP DEC a= assign_var i= ID ^( SLIST ( statement )* ) )
				{
				DebugLocation(71, 4);
				DebugLocation(71, 6);
				Match(input,LOOP,Follow._LOOP_in_for_stat384); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(71, 11);
				Match(input,DEC,Follow._DEC_in_for_stat386); if (state.failed) return;
				DebugLocation(71, 16);
				PushFollow(Follow._assign_var_in_for_stat390);
				a=assign_var();
				PopFollow();
				if (state.failed) return;
				DebugLocation(71, 28);
				if (state.backtracking == 0)
				{
					 emitter.SetForInc(a); 
				}
				DebugLocation(71, 55);
				i=(CommonTree)Match(input,ID,Follow._ID_in_for_stat396); if (state.failed) return;
				DebugLocation(71, 59);
				DebugLocation(71, 61);
				Match(input,SLIST,Follow._SLIST_in_for_stat399); if (state.failed) return;

				DebugLocation(71, 67);
				if (state.backtracking == 0)
				{
					emitter.EmitInitFor(i.Token, false);
				}

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(71, 107);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:107: ( statement )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if (((LA14_0>=ASGN && LA14_0<=CALL)||LA14_0==JMP||LA14_0==LOOP||(LA14_0>=RET && LA14_0<=SJMP)||LA14_0==VAR))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:71:107: statement
							{
							DebugLocation(71, 107);
							PushFollow(Follow._statement_in_for_stat403);
							statement();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(71, 121);
				if (state.backtracking == 0)
				{
					emitter.EmitEndFor(i.Token, false);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_stat", 8);
			LeaveRule("for_stat", 8);
			LeaveRule_for_stat();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "for_stat"); }
		return;

	}
	// $ANTLR end "for_stat"

	partial void EnterRule_while_stat();
	partial void LeaveRule_while_stat();

	// $ANTLR start "while_stat"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:75:1: while_stat : ^( LOOP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) ;
	[GrammarRule("while_stat")]
	private void while_stat()
	{
		EnterRule_while_stat();
		EnterRule("while_stat", 9);
		TraceIn("while_stat", 9);
		try { DebugEnterRule(GrammarFileName, "while_stat");
		DebugLocation(75, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:76:2: ( ^( LOOP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:76:5: ^( LOOP ^( LEXP logic_expression ) ^( SLIST ( statement )* ) )
			{
			DebugLocation(76, 5);
			DebugLocation(76, 7);
			Match(input,LOOP,Follow._LOOP_in_while_stat425); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(76, 12);
			DebugLocation(76, 14);
			Match(input,LEXP,Follow._LEXP_in_while_stat428); if (state.failed) return;

			DebugLocation(76, 19);
			if (state.backtracking == 0)
			{
				emitter.EmitInitWhile();
			}

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(76, 46);
			PushFollow(Follow._logic_expression_in_while_stat432);
			logic_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(76, 64);
			DebugLocation(76, 66);
			Match(input,SLIST,Follow._SLIST_in_while_stat436); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(76, 73);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:76:73: ( statement )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if (((LA16_0>=ASGN && LA16_0<=CALL)||LA16_0==JMP||LA16_0==LOOP||(LA16_0>=RET && LA16_0<=SJMP)||LA16_0==VAR))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:76:73: statement
						{
						DebugLocation(76, 73);
						PushFollow(Follow._statement_in_while_stat439);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(76, 86);
			if (state.backtracking == 0)
			{
				emitter.EmitEndWhile();
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("while_stat", 9);
			LeaveRule("while_stat", 9);
			LeaveRule_while_stat();
		}
		DebugLocation(78, 1);
		} finally { DebugExitRule(GrammarFileName, "while_stat"); }
		return;

	}
	// $ANTLR end "while_stat"

	partial void EnterRule_repeat_stat();
	partial void LeaveRule_repeat_stat();

	// $ANTLR start "repeat_stat"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:80:1: repeat_stat : ^( LOOP ^( SLIST ( statement )* ) ^( LEXP logic_expression ) ) ;
	[GrammarRule("repeat_stat")]
	private void repeat_stat()
	{
		EnterRule_repeat_stat();
		EnterRule("repeat_stat", 10);
		TraceIn("repeat_stat", 10);
		 invertExp = false; 
		try { DebugEnterRule(GrammarFileName, "repeat_stat");
		DebugLocation(80, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:83:2: ( ^( LOOP ^( SLIST ( statement )* ) ^( LEXP logic_expression ) ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:83:4: ^( LOOP ^( SLIST ( statement )* ) ^( LEXP logic_expression ) )
			{
			DebugLocation(83, 4);
			DebugLocation(83, 6);
			Match(input,LOOP,Follow._LOOP_in_repeat_stat473); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(83, 11);
			DebugLocation(83, 13);
			Match(input,SLIST,Follow._SLIST_in_repeat_stat476); if (state.failed) return;

			DebugLocation(83, 19);
			if (state.backtracking == 0)
			{
				emitter.EmitInitRepeat();
			}

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(83, 47);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:83:47: ( statement )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if (((LA17_0>=ASGN && LA17_0<=CALL)||LA17_0==JMP||LA17_0==LOOP||(LA17_0>=RET && LA17_0<=SJMP)||LA17_0==VAR))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:83:47: statement
						{
						DebugLocation(83, 47);
						PushFollow(Follow._statement_in_repeat_stat480);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(83, 59);
			DebugLocation(83, 61);
			Match(input,LEXP,Follow._LEXP_in_repeat_stat485); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(83, 66);
			PushFollow(Follow._logic_expression_in_repeat_stat487);
			logic_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(83, 85);
			if (state.backtracking == 0)
			{
				emitter.EmitEndRepeat();
			}

			}

			if (state.backtracking == 0)
			{
				 invertExp = true; 
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("repeat_stat", 10);
			LeaveRule("repeat_stat", 10);
			LeaveRule_repeat_stat();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "repeat_stat"); }
		return;

	}
	// $ANTLR end "repeat_stat"

	partial void EnterRule_function_call();
	partial void LeaveRule_function_call();

	// $ANTLR start "function_call"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:87:1: function_call : ^( CALL ID ( function_arg_list )* ) ;
	[GrammarRule("function_call")]
	private void function_call()
	{
		EnterRule_function_call();
		EnterRule("function_call", 11);
		TraceIn("function_call", 11);
		CommonTree ID2 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "function_call");
		DebugLocation(87, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:88:2: ( ^( CALL ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:88:5: ^( CALL ID ( function_arg_list )* )
			{
			DebugLocation(88, 5);
			DebugLocation(88, 7);
			Match(input,CALL,Follow._CALL_in_function_call508); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(88, 12);
			ID2=(CommonTree)Match(input,ID,Follow._ID_in_function_call510); if (state.failed) return;
			DebugLocation(88, 15);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:88:15: ( function_arg_list )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==ARG))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:88:15: function_arg_list
					{
					DebugLocation(88, 15);
					PushFollow(Follow._function_arg_list_in_function_call512);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(89, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitCall(ID2.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_call", 11);
			LeaveRule("function_call", 11);
			LeaveRule_function_call();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "function_call"); }
		return;

	}
	// $ANTLR end "function_call"

	partial void EnterRule_property_call();
	partial void LeaveRule_property_call();

	// $ANTLR start "property_call"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:92:1: property_call : ^( PCALL o= ID p= ID ) ;
	[GrammarRule("property_call")]
	private void property_call()
	{
		EnterRule_property_call();
		EnterRule("property_call", 12);
		TraceIn("property_call", 12);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "property_call");
		DebugLocation(92, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:93:2: ( ^( PCALL o= ID p= ID ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:93:5: ^( PCALL o= ID p= ID )
			{
			DebugLocation(93, 5);
			DebugLocation(93, 7);
			Match(input,PCALL,Follow._PCALL_in_property_call533); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(93, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_property_call537); if (state.failed) return;
			DebugLocation(93, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_property_call541); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(94, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitPropCall(o.Token, p.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("property_call", 12);
			LeaveRule("property_call", 12);
			LeaveRule_property_call();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "property_call"); }
		return;

	}
	// $ANTLR end "property_call"

	partial void EnterRule_method_call();
	partial void LeaveRule_method_call();

	// $ANTLR start "method_call"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:97:1: method_call : ^( MCALL o= ID p= ID ( function_arg_list )* ) ;
	[GrammarRule("method_call")]
	private void method_call()
	{
		EnterRule_method_call();
		EnterRule("method_call", 13);
		TraceIn("method_call", 13);
		CommonTree o = default(CommonTree);
		CommonTree p = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "method_call");
		DebugLocation(97, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:98:2: ( ^( MCALL o= ID p= ID ( function_arg_list )* ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:98:5: ^( MCALL o= ID p= ID ( function_arg_list )* )
			{
			DebugLocation(98, 5);
			DebugLocation(98, 7);
			Match(input,MCALL,Follow._MCALL_in_method_call566); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(98, 14);
			o=(CommonTree)Match(input,ID,Follow._ID_in_method_call570); if (state.failed) return;
			DebugLocation(98, 19);
			p=(CommonTree)Match(input,ID,Follow._ID_in_method_call574); if (state.failed) return;
			DebugLocation(98, 23);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:98:23: ( function_arg_list )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==ARG))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:98:23: function_arg_list
					{
					DebugLocation(98, 23);
					PushFollow(Follow._function_arg_list_in_method_call576);
					function_arg_list();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(99, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitMethodCall(o.Token, p.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("method_call", 13);
			LeaveRule("method_call", 13);
			LeaveRule_method_call();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "method_call"); }
		return;

	}
	// $ANTLR end "method_call"

	partial void EnterRule_function_arg_list();
	partial void LeaveRule_function_arg_list();

	// $ANTLR start "function_arg_list"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:102:1: function_arg_list : ^( ARG ( plus_expression )* ) ;
	[GrammarRule("function_arg_list")]
	private void function_arg_list()
	{
		EnterRule_function_arg_list();
		EnterRule("function_arg_list", 14);
		TraceIn("function_arg_list", 14);
		try { DebugEnterRule(GrammarFileName, "function_arg_list");
		DebugLocation(102, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:104:2: ( ^( ARG ( plus_expression )* ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:104:4: ^( ARG ( plus_expression )* )
			{
			DebugLocation(104, 4);
			DebugLocation(104, 6);
			Match(input,ARG,Follow._ARG_in_function_arg_list603); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(104, 10);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:104:10: ( plus_expression )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0==CALL||(LA20_0>=F && LA20_0<=FLOAT)||LA20_0==ID||LA20_0==INDEX||LA20_0==INT||LA20_0==MCALL||LA20_0==PCALL||(LA20_0>=STRING && LA20_0<=T)||LA20_0==41||(LA20_0>=44 && LA20_0<=45)||LA20_0==47||LA20_0==50))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:104:10: plus_expression
						{
						DebugLocation(104, 10);
						PushFollow(Follow._plus_expression_in_function_arg_list605);
						plus_expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function_arg_list", 14);
			LeaveRule("function_arg_list", 14);
			LeaveRule_function_arg_list();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "function_arg_list"); }
		return;

	}
	// $ANTLR end "function_arg_list"

	partial void EnterRule_asm_code();
	partial void LeaveRule_asm_code();

	// $ANTLR start "asm_code"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:1: asm_code : ^( ASM (s+= STRING )* ) ;
	[GrammarRule("asm_code")]
	private void asm_code()
	{
		EnterRule_asm_code();
		EnterRule("asm_code", 15);
		TraceIn("asm_code", 15);
		CommonTree s = default(CommonTree);
		List<CommonTree> list_s = null;

		try { DebugEnterRule(GrammarFileName, "asm_code");
		DebugLocation(108, 8);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:9: ( ^( ASM (s+= STRING )* ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:11: ^( ASM (s+= STRING )* )
			{
			DebugLocation(108, 11);
			DebugLocation(108, 13);
			Match(input,ASM,Follow._ASM_in_asm_code621); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(108, 18);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:18: (s+= STRING )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==STRING))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:108:18: s+= STRING
						{
						DebugLocation(108, 18);
						s=(CommonTree)Match(input,STRING,Follow._STRING_in_asm_code625); if (state.failed) return;
						if (list_s==null) list_s=new List<CommonTree>();
						list_s.Add(s);


						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}

			DebugLocation(109, 3);
			if (state.backtracking == 0)
			{
				emitter.EmitAsmCode(list_s);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("asm_code", 15);
			LeaveRule("asm_code", 15);
			LeaveRule_asm_code();
		}
		DebugLocation(110, 8);
		} finally { DebugExitRule(GrammarFileName, "asm_code"); }
		return;

	}
	// $ANTLR end "asm_code"

	partial void EnterRule_assign_var();
	partial void LeaveRule_assign_var();

	// $ANTLR start "assign_var"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:113:1: assign_var returns [string id] : ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) );
	[GrammarRule("assign_var")]
	private string assign_var()
	{
		EnterRule_assign_var();
		EnterRule("assign_var", 16);
		TraceIn("assign_var", 16);
		string id = default(string);


		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);
		CommonTree ID3 = default(CommonTree);
		CommonTree ID4 = default(CommonTree);
		CommonTree INT5 = default(CommonTree);
		CommonTree ID6 = default(CommonTree);
		CommonTree ID7 = default(CommonTree);
		CommonTree ID8 = default(CommonTree);
		CommonTree ID9 = default(CommonTree);
		CommonTree ID10 = default(CommonTree);
		CommonTree ID11 = default(CommonTree);
		object a = default(object);

		try { DebugEnterRule(GrammarFileName, "assign_var");
		DebugLocation(113, 4);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:114:5: ( ^( ASGN ID a= atom ) | ^( ASGN ^( AR INT ) ID plus_expression ) | ^( ASGN ^( AR i= ID ) p= ID plus_expression ) | ^( ASGN ID plus_expression ) | ^( ASGN ID 'nulo' ) | ^( ASGN ID 'falso' ) | ^( ASGN ID 'verdadeiro' ) | ^( ASGN ID l= INT r= INT ) | ^( ASGN ID ^( ILIST (i= INT )* ) ) )
			int alt23=9;
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==ASGN))
			{
				int LA23_1 = input.LA(2);

				if ((LA23_1==DOWN))
				{
					int LA23_2 = input.LA(3);

					if ((LA23_2==ID))
					{
						int LA23_3 = input.LA(4);

						if ((EvaluatePredicate(synpred31_NPortugolWalker_fragment)))
						{
							alt23 = 1;
						}
						else if ((EvaluatePredicate(synpred34_NPortugolWalker_fragment)))
						{
							alt23 = 4;
						}
						else if ((EvaluatePredicate(synpred35_NPortugolWalker_fragment)))
						{
							alt23 = 5;
						}
						else if ((EvaluatePredicate(synpred36_NPortugolWalker_fragment)))
						{
							alt23 = 6;
						}
						else if ((EvaluatePredicate(synpred37_NPortugolWalker_fragment)))
						{
							alt23 = 7;
						}
						else if ((EvaluatePredicate(synpred38_NPortugolWalker_fragment)))
						{
							alt23 = 8;
						}
						else if ((true))
						{
							alt23 = 9;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 23, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA23_2==AR))
					{
						int LA23_4 = input.LA(4);

						if ((EvaluatePredicate(synpred32_NPortugolWalker_fragment)))
						{
							alt23 = 2;
						}
						else if ((EvaluatePredicate(synpred33_NPortugolWalker_fragment)))
						{
							alt23 = 3;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return id;}
							NoViableAltException nvae = new NoViableAltException("", 23, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return id;}
						NoViableAltException nvae = new NoViableAltException("", 23, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return id;}
					NoViableAltException nvae = new NoViableAltException("", 23, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return id;}
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:7: ^( ASGN ID a= atom )
				{
				DebugLocation(115, 7);
				DebugLocation(115, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var666); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(115, 14);
				ID3=(CommonTree)Match(input,ID,Follow._ID_in_assign_var668); if (state.failed) return id;
				DebugLocation(115, 18);
				PushFollow(Follow._atom_in_assign_var672);
				a=atom();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(115, 25);
				if (state.backtracking == 0)
				{
					id = (ID3!=null?ID3.Text:null); emitter.EmitAssign(ID3.Token, a);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:116:7: ^( ASGN ^( AR INT ) ID plus_expression )
				{
				DebugLocation(116, 7);
				DebugLocation(116, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var684); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(116, 14);
				DebugLocation(116, 16);
				Match(input,AR,Follow._AR_in_assign_var687); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(116, 19);
				INT5=(CommonTree)Match(input,INT,Follow._INT_in_assign_var689); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(116, 24);
				ID4=(CommonTree)Match(input,ID,Follow._ID_in_assign_var692); if (state.failed) return id;
				DebugLocation(116, 27);
				PushFollow(Follow._plus_expression_in_assign_var694);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(116, 44);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(ID4.Token, int.Parse((INT5!=null?INT5.Text:null)));
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:117:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
				{
				DebugLocation(117, 7);
				DebugLocation(117, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var712); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(117, 14);
				DebugLocation(117, 16);
				Match(input,AR,Follow._AR_in_assign_var715); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(117, 20);
				i=(CommonTree)Match(input,ID,Follow._ID_in_assign_var719); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(117, 26);
				p=(CommonTree)Match(input,ID,Follow._ID_in_assign_var724); if (state.failed) return id;
				DebugLocation(117, 30);
				PushFollow(Follow._plus_expression_in_assign_var726);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(117, 47);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(p.Token, (i!=null?i.Text:null));
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:118:7: ^( ASGN ID plus_expression )
				{
				DebugLocation(118, 7);
				DebugLocation(118, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var748); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(118, 14);
				ID6=(CommonTree)Match(input,ID,Follow._ID_in_assign_var750); if (state.failed) return id;
				DebugLocation(118, 17);
				PushFollow(Follow._plus_expression_in_assign_var752);
				plus_expression();
				PopFollow();
				if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(118, 34);
				if (state.backtracking == 0)
				{
					emitter.EmitPop(ID6.Token);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:119:7: ^( ASGN ID 'nulo' )
				{
				DebugLocation(119, 7);
				DebugLocation(119, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var765); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(119, 14);
				ID7=(CommonTree)Match(input,ID,Follow._ID_in_assign_var767); if (state.failed) return id;
				DebugLocation(119, 17);
				Match(input,77,Follow._77_in_assign_var769); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(119, 25);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID7.Token, null);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:120:7: ^( ASGN ID 'falso' )
				{
				DebugLocation(120, 7);
				DebugLocation(120, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var782); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(120, 14);
				ID8=(CommonTree)Match(input,ID,Follow._ID_in_assign_var784); if (state.failed) return id;
				DebugLocation(120, 17);
				Match(input,76,Follow._76_in_assign_var786); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(120, 26);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID8.Token, false);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:121:7: ^( ASGN ID 'verdadeiro' )
				{
				DebugLocation(121, 7);
				DebugLocation(121, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var799); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(121, 14);
				ID9=(CommonTree)Match(input,ID,Follow._ID_in_assign_var801); if (state.failed) return id;
				DebugLocation(121, 17);
				Match(input,78,Follow._78_in_assign_var803); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(121, 31);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID9.Token, true);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:122:7: ^( ASGN ID l= INT r= INT )
				{
				DebugLocation(122, 7);
				DebugLocation(122, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var824); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(122, 14);
				ID10=(CommonTree)Match(input,ID,Follow._ID_in_assign_var826); if (state.failed) return id;
				DebugLocation(122, 18);
				l=(CommonTree)Match(input,INT,Follow._INT_in_assign_var830); if (state.failed) return id;
				DebugLocation(122, 24);
				r=(CommonTree)Match(input,INT,Follow._INT_in_assign_var834); if (state.failed) return id;

				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(122, 30);
				if (state.backtracking == 0)
				{
					emitter.EmitAssign(ID10.Token, int.Parse((l!=null?l.Text:null)), int.Parse((r!=null?r.Text:null)));
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:123:7: ^( ASGN ID ^( ILIST (i= INT )* ) )
				{
				DebugLocation(123, 7);
				DebugLocation(123, 9);
				Match(input,ASGN,Follow._ASGN_in_assign_var846); if (state.failed) return id;

				Match(input, TokenTypes.Down, null); if (state.failed) return id;
				DebugLocation(123, 14);
				ID11=(CommonTree)Match(input,ID,Follow._ID_in_assign_var848); if (state.failed) return id;
				DebugLocation(123, 17);
				DebugLocation(123, 19);
				Match(input,ILIST,Follow._ILIST_in_assign_var851); if (state.failed) return id;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return id;
					DebugLocation(123, 26);
					// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:123:26: (i= INT )*
					try { DebugEnterSubRule(22);
					while (true)
					{
						int alt22=2;
						try { DebugEnterDecision(22, false);
						int LA22_0 = input.LA(1);

						if ((LA22_0==INT))
						{
							alt22 = 1;
						}


						} finally { DebugExitDecision(22); }
						switch ( alt22 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:123:26: i= INT
							{
							DebugLocation(123, 26);
							i=(CommonTree)Match(input,INT,Follow._INT_in_assign_var855); if (state.failed) return id;

							}
							break;

						default:
							goto loop22;
						}
					}

					loop22:
						;

					} finally { DebugExitSubRule(22); }


					Match(input, TokenTypes.Up, null); if (state.failed) return id;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return id;

				DebugLocation(123, 34);
				if (state.backtracking == 0)
				{
					emitter.EmitAssignArray(ID11.Token, i);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assign_var", 16);
			LeaveRule("assign_var", 16);
			LeaveRule_assign_var();
		}
		DebugLocation(124, 4);
		} finally { DebugExitRule(GrammarFileName, "assign_var"); }
		return id;

	}
	// $ANTLR end "assign_var"

	partial void EnterRule_return_stat();
	partial void LeaveRule_return_stat();

	// $ANTLR start "return_stat"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:126:1: return_stat : ^( RET plus_expression ) ;
	[GrammarRule("return_stat")]
	private void return_stat()
	{
		EnterRule_return_stat();
		EnterRule("return_stat", 17);
		TraceIn("return_stat", 17);
		CommonTree RET12 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "return_stat");
		DebugLocation(126, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:127:2: ( ^( RET plus_expression ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:127:5: ^( RET plus_expression )
			{
			DebugLocation(127, 5);
			DebugLocation(127, 7);
			RET12=(CommonTree)Match(input,RET,Follow._RET_in_return_stat878); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(127, 11);
			PushFollow(Follow._plus_expression_in_return_stat880);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(127, 27);
			if (state.backtracking == 0)
			{
				emitter.EmitRet(RET12.Token);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("return_stat", 17);
			LeaveRule("return_stat", 17);
			LeaveRule_return_stat();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "return_stat"); }
		return;

	}
	// $ANTLR end "return_stat"

	partial void EnterRule_plus_expression();
	partial void LeaveRule_plus_expression();

	// $ANTLR start "plus_expression"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:132:1: plus_expression : ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( '%' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom );
	[GrammarRule("plus_expression")]
	private void plus_expression()
	{
		EnterRule_plus_expression();
		EnterRule("plus_expression", 18);
		TraceIn("plus_expression", 18);
		CommonTree i2 = default(CommonTree);
		CommonTree i1 = default(CommonTree);
		CommonTree ID13 = default(CommonTree);
		CommonTree INT14 = default(CommonTree);

		 inExpression = true; 
		try { DebugEnterRule(GrammarFileName, "plus_expression");
		DebugLocation(132, 0);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:135:3: ( ^( '+' plus_expression plus_expression ) | ^( '-' plus_expression plus_expression ) | ^( '*' plus_expression plus_expression ) | ^( '/' plus_expression plus_expression ) | ^( '%' plus_expression plus_expression ) | ^( INDEX INT ) ID | ^( INDEX i2= ID ) i1= ID | function_call | method_call | property_call | atom )
			int alt24=11;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case 45:
				{
				alt24 = 1;
				}
				break;
			case 47:
				{
				alt24 = 2;
				}
				break;
			case 44:
				{
				alt24 = 3;
				}
				break;
			case 50:
				{
				alt24 = 4;
				}
				break;
			case 41:
				{
				alt24 = 5;
				}
				break;
			case INDEX:
				{
				int LA24_6 = input.LA(2);

				if ((LA24_6==DOWN))
				{
					int LA24_16 = input.LA(3);

					if ((LA24_16==INT))
					{
						alt24 = 6;
					}
					else if ((LA24_16==ID))
					{
						alt24 = 7;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 24, 16, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CALL:
				{
				alt24 = 8;
				}
				break;
			case MCALL:
				{
				alt24 = 9;
				}
				break;
			case PCALL:
				{
				alt24 = 10;
				}
				break;
			case F:
			case FLOAT:
			case ID:
			case INT:
			case STRING:
			case T:
				{
				alt24 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:135:3: ^( '+' plus_expression plus_expression )
				{
				DebugLocation(135, 3);
				DebugLocation(135, 5);
				Match(input,45,Follow._45_in_plus_expression905); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(135, 9);
				PushFollow(Follow._plus_expression_in_plus_expression907);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(135, 25);
				PushFollow(Follow._plus_expression_in_plus_expression909);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(135, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackAdd();
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:136:3: ^( '-' plus_expression plus_expression )
				{
				DebugLocation(136, 3);
				DebugLocation(136, 5);
				Match(input,47,Follow._47_in_plus_expression917); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(136, 9);
				PushFollow(Follow._plus_expression_in_plus_expression919);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(136, 25);
				PushFollow(Follow._plus_expression_in_plus_expression921);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(136, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackSub();
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:137:3: ^( '*' plus_expression plus_expression )
				{
				DebugLocation(137, 3);
				DebugLocation(137, 5);
				Match(input,44,Follow._44_in_plus_expression929); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(137, 9);
				PushFollow(Follow._plus_expression_in_plus_expression931);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(137, 25);
				PushFollow(Follow._plus_expression_in_plus_expression933);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(137, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackPlus();
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:138:3: ^( '/' plus_expression plus_expression )
				{
				DebugLocation(138, 3);
				DebugLocation(138, 5);
				Match(input,50,Follow._50_in_plus_expression941); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(138, 9);
				PushFollow(Follow._plus_expression_in_plus_expression943);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(138, 25);
				PushFollow(Follow._plus_expression_in_plus_expression945);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(138, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackDiv();
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:139:3: ^( '%' plus_expression plus_expression )
				{
				DebugLocation(139, 3);
				DebugLocation(139, 5);
				Match(input,41,Follow._41_in_plus_expression953); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(139, 9);
				PushFollow(Follow._plus_expression_in_plus_expression955);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(139, 25);
				PushFollow(Follow._plus_expression_in_plus_expression957);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(139, 42);
				if (state.backtracking == 0)
				{
					emitter.EmitStackMod();
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:140:3: ^( INDEX INT ) ID
				{
				DebugLocation(140, 3);
				DebugLocation(140, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression965); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(140, 11);
				INT14=(CommonTree)Match(input,INT,Follow._INT_in_plus_expression967); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(140, 16);
				ID13=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression970); if (state.failed) return;
				DebugLocation(140, 19);
				if (state.backtracking == 0)
				{
					emitter.EmitPush((ID13!=null?ID13.Text:null), int.Parse((INT14!=null?INT14.Text:null)));
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:141:3: ^( INDEX i2= ID ) i1= ID
				{
				DebugLocation(141, 3);
				DebugLocation(141, 5);
				Match(input,INDEX,Follow._INDEX_in_plus_expression977); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(141, 13);
				i2=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression981); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(141, 20);
				i1=(CommonTree)Match(input,ID,Follow._ID_in_plus_expression986); if (state.failed) return;
				DebugLocation(141, 24);
				if (state.backtracking == 0)
				{
					emitter.EmitPush((i1!=null?i1.Text:null), (i2!=null?i2.Text:null));
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:142:3: function_call
				{
				DebugLocation(142, 3);
				PushFollow(Follow._function_call_in_plus_expression992);
				function_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:143:3: method_call
				{
				DebugLocation(143, 3);
				PushFollow(Follow._method_call_in_plus_expression996);
				method_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:144:3: property_call
				{
				DebugLocation(144, 3);
				PushFollow(Follow._property_call_in_plus_expression1000);
				property_call();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:145:3: atom
				{
				DebugLocation(145, 3);
				PushFollow(Follow._atom_in_plus_expression1004);
				atom();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			if (state.backtracking == 0)
			{
				 inExpression = false; 
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("plus_expression", 18);
			LeaveRule("plus_expression", 18);
			LeaveRule_plus_expression();
		}
		DebugLocation(146, 0);
		} finally { DebugExitRule(GrammarFileName, "plus_expression"); }
		return;

	}
	// $ANTLR end "plus_expression"

	partial void EnterRule_logic_expression();
	partial void LeaveRule_logic_expression();

	// $ANTLR start "logic_expression"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:148:1: logic_expression : ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression );
	[GrammarRule("logic_expression")]
	private void logic_expression()
	{
		EnterRule_logic_expression();
		EnterRule("logic_expression", 19);
		TraceIn("logic_expression", 19);
		try { DebugEnterRule(GrammarFileName, "logic_expression");
		DebugLocation(148, 1);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:149:2: ( ^( '<' plus_expression plus_expression ) | ^( '>' plus_expression plus_expression ) | ^( '<=' plus_expression plus_expression ) | ^( '>=' plus_expression plus_expression ) | ^( '==' plus_expression plus_expression ) | ^( '!=' plus_expression plus_expression ) | ^( 'e' plus_expression plus_expression ) | ^( 'ou' plus_expression plus_expression ) | plus_expression )
			int alt25=9;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case 52:
				{
				alt25 = 1;
				}
				break;
			case 56:
				{
				alt25 = 2;
				}
				break;
			case 53:
				{
				alt25 = 3;
				}
				break;
			case 57:
				{
				alt25 = 4;
				}
				break;
			case 55:
				{
				alt25 = 5;
				}
				break;
			case 39:
				{
				alt25 = 6;
				}
				break;
			case 62:
				{
				alt25 = 7;
				}
				break;
			case 67:
				{
				alt25 = 8;
				}
				break;
			case CALL:
			case F:
			case FLOAT:
			case ID:
			case INDEX:
			case INT:
			case MCALL:
			case PCALL:
			case STRING:
			case T:
			case 41:
			case 44:
			case 45:
			case 47:
			case 50:
				{
				alt25 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:149:6: ^( '<' plus_expression plus_expression )
				{
				DebugLocation(149, 6);
				DebugLocation(149, 8);
				Match(input,52,Follow._52_in_logic_expression1017); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(149, 12);
				PushFollow(Follow._plus_expression_in_logic_expression1019);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(149, 28);
				PushFollow(Follow._plus_expression_in_logic_expression1021);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(149, 45);
				if (state.backtracking == 0)
				{
					emitter.EmitLessExp(invertExp);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:150:6: ^( '>' plus_expression plus_expression )
				{
				DebugLocation(150, 6);
				DebugLocation(150, 8);
				Match(input,56,Follow._56_in_logic_expression1032); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(150, 12);
				PushFollow(Follow._plus_expression_in_logic_expression1034);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(150, 28);
				PushFollow(Follow._plus_expression_in_logic_expression1036);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(150, 45);
				if (state.backtracking == 0)
				{
					emitter.EmitGreaterExp(invertExp);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:151:6: ^( '<=' plus_expression plus_expression )
				{
				DebugLocation(151, 6);
				DebugLocation(151, 8);
				Match(input,53,Follow._53_in_logic_expression1047); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(151, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1049);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(151, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1051);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(151, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitLessEqExp(invertExp);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:152:6: ^( '>=' plus_expression plus_expression )
				{
				DebugLocation(152, 6);
				DebugLocation(152, 8);
				Match(input,57,Follow._57_in_logic_expression1062); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(152, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1064);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(152, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1066);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(152, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitGreaterEqExp(invertExp);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:153:6: ^( '==' plus_expression plus_expression )
				{
				DebugLocation(153, 6);
				DebugLocation(153, 8);
				Match(input,55,Follow._55_in_logic_expression1077); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(153, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1079);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(153, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1081);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(153, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitEqualsExp(invertExp);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:154:6: ^( '!=' plus_expression plus_expression )
				{
				DebugLocation(154, 6);
				DebugLocation(154, 8);
				Match(input,39,Follow._39_in_logic_expression1092); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(154, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1094);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(154, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1096);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;

				DebugLocation(154, 46);
				if (state.backtracking == 0)
				{
					emitter.EmitNotEqExp(invertExp);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:155:6: ^( 'e' plus_expression plus_expression )
				{
				DebugLocation(155, 6);
				DebugLocation(155, 8);
				Match(input,62,Follow._62_in_logic_expression1107); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(155, 12);
				PushFollow(Follow._plus_expression_in_logic_expression1109);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(155, 28);
				PushFollow(Follow._plus_expression_in_logic_expression1111);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:156:6: ^( 'ou' plus_expression plus_expression )
				{
				DebugLocation(156, 6);
				DebugLocation(156, 8);
				Match(input,67,Follow._67_in_logic_expression1120); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(156, 13);
				PushFollow(Follow._plus_expression_in_logic_expression1122);
				plus_expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(156, 29);
				PushFollow(Follow._plus_expression_in_logic_expression1124);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:157:4: plus_expression
				{
				DebugLocation(157, 4);
				PushFollow(Follow._plus_expression_in_logic_expression1136);
				plus_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logic_expression", 19);
			LeaveRule("logic_expression", 19);
			LeaveRule_logic_expression();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expression"); }
		return;

	}
	// $ANTLR end "logic_expression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();

	// $ANTLR start "atom"
	// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:162:1: atom returns [object value] : (a= ID |a= INT |a= FLOAT |a= STRING |a= T |a= F );
	[GrammarRule("atom")]
	private object atom()
	{
		EnterRule_atom();
		EnterRule("atom", 20);
		TraceIn("atom", 20);
		object value = default(object);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(162, 4);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:162:27: (a= ID |a= INT |a= FLOAT |a= STRING |a= T |a= F )
			int alt26=6;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt26 = 1;
				}
				break;
			case INT:
				{
				alt26 = 2;
				}
				break;
			case FLOAT:
				{
				alt26 = 3;
				}
				break;
			case STRING:
				{
				alt26 = 4;
				}
				break;
			case T:
				{
				alt26 = 5;
				}
				break;
			case F:
				{
				alt26 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:163:7: a= ID
				{
				DebugLocation(163, 8);
				a=(CommonTree)Match(input,ID,Follow._ID_in_atom1164); if (state.failed) return value;
				DebugLocation(163, 12);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null); emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:164:7: a= INT
				{
				DebugLocation(164, 8);
				a=(CommonTree)Match(input,INT,Follow._INT_in_atom1176); if (state.failed) return value;
				DebugLocation(164, 12);
				if (state.backtracking == 0)
				{
					value = int.Parse((a!=null?a.Text:null));  emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:165:7: a= FLOAT
				{
				DebugLocation(165, 8);
				a=(CommonTree)Match(input,FLOAT,Follow._FLOAT_in_atom1187); if (state.failed) return value;
				DebugLocation(165, 14);
				if (state.backtracking == 0)
				{
					value = float.Parse((a!=null?a.Text:null));  emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:166:7: a= STRING
				{
				DebugLocation(166, 8);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_atom1198); if (state.failed) return value;
				DebugLocation(166, 15);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null);  emitter.EmitPush(value, a.Token);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:167:7: a= T
				{
				DebugLocation(167, 8);
				a=(CommonTree)Match(input,T,Follow._T_in_atom1209); if (state.failed) return value;
				DebugLocation(167, 10);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null);  emitter.EmitPush(true, a.Token);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:168:7: a= F
				{
				DebugLocation(168, 8);
				a=(CommonTree)Match(input,F,Follow._F_in_atom1224); if (state.failed) return value;
				DebugLocation(168, 10);
				if (state.backtracking == 0)
				{
					value = (a!=null?a.Text:null);  emitter.EmitPush(false, a.Token);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 20);
			LeaveRule("atom", 20);
			LeaveRule_atom();
		}
		DebugLocation(169, 4);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return value;

	}
	// $ANTLR end "atom"

	partial void EnterRule_synpred19_NPortugolWalker_fragment();
	partial void LeaveRule_synpred19_NPortugolWalker_fragment();

	// $ANTLR start synpred19_NPortugolWalker
	public void synpred19_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred19_NPortugolWalker_fragment();
		EnterRule("synpred19_NPortugolWalker_fragment", 39);
		TraceIn("synpred19_NPortugolWalker_fragment", 39);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:3: ( ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:3: ^( LOOP a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(68, 3);
			DebugLocation(68, 5);
			Match(input,LOOP,Follow._LOOP_in_synpred19_NPortugolWalker291); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(68, 11);
			PushFollow(Follow._assign_var_in_synpred19_NPortugolWalker295);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(68, 50);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred19_NPortugolWalker301); if (state.failed) return;
			DebugLocation(68, 55);
			DebugLocation(68, 57);
			Match(input,SLIST,Follow._SLIST_in_synpred19_NPortugolWalker304); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(68, 103);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:103: ( statement )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if (((LA28_0>=ASGN && LA28_0<=CALL)||LA28_0==JMP||LA28_0==LOOP||(LA28_0>=RET && LA28_0<=SJMP)||LA28_0==VAR))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:68:103: statement
						{
						DebugLocation(68, 103);
						PushFollow(Follow._statement_in_synpred19_NPortugolWalker309);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred19_NPortugolWalker_fragment", 39);
			LeaveRule("synpred19_NPortugolWalker_fragment", 39);
			LeaveRule_synpred19_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred19_NPortugolWalker

	partial void EnterRule_synpred21_NPortugolWalker_fragment();
	partial void LeaveRule_synpred21_NPortugolWalker_fragment();

	// $ANTLR start synpred21_NPortugolWalker
	public void synpred21_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred21_NPortugolWalker_fragment();
		EnterRule("synpred21_NPortugolWalker_fragment", 41);
		TraceIn("synpred21_NPortugolWalker_fragment", 41);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:4: ( ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:4: ^( LOOP DEC a= assign_var i= INT ^( SLIST ( statement )* ) )
			{
			DebugLocation(69, 4);
			DebugLocation(69, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred21_NPortugolWalker322); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(69, 11);
			Match(input,DEC,Follow._DEC_in_synpred21_NPortugolWalker324); if (state.failed) return;
			DebugLocation(69, 16);
			PushFollow(Follow._assign_var_in_synpred21_NPortugolWalker328);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(69, 55);
			i=(CommonTree)Match(input,INT,Follow._INT_in_synpred21_NPortugolWalker334); if (state.failed) return;
			DebugLocation(69, 60);
			DebugLocation(69, 62);
			Match(input,SLIST,Follow._SLIST_in_synpred21_NPortugolWalker337); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(69, 108);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:108: ( statement )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if (((LA29_0>=ASGN && LA29_0<=CALL)||LA29_0==JMP||LA29_0==LOOP||(LA29_0>=RET && LA29_0<=SJMP)||LA29_0==VAR))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:69:108: statement
						{
						DebugLocation(69, 108);
						PushFollow(Follow._statement_in_synpred21_NPortugolWalker341);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred21_NPortugolWalker_fragment", 41);
			LeaveRule("synpred21_NPortugolWalker_fragment", 41);
			LeaveRule_synpred21_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred21_NPortugolWalker

	partial void EnterRule_synpred23_NPortugolWalker_fragment();
	partial void LeaveRule_synpred23_NPortugolWalker_fragment();

	// $ANTLR start synpred23_NPortugolWalker
	public void synpred23_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		string a = default(string);

		EnterRule_synpred23_NPortugolWalker_fragment();
		EnterRule("synpred23_NPortugolWalker_fragment", 43);
		TraceIn("synpred23_NPortugolWalker_fragment", 43);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:4: ( ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:4: ^( LOOP a= assign_var i= ID ^( SLIST ( statement )* ) )
			{
			DebugLocation(70, 4);
			DebugLocation(70, 6);
			Match(input,LOOP,Follow._LOOP_in_synpred23_NPortugolWalker353); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(70, 12);
			PushFollow(Follow._assign_var_in_synpred23_NPortugolWalker357);
			a=assign_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(70, 51);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred23_NPortugolWalker363); if (state.failed) return;
			DebugLocation(70, 55);
			DebugLocation(70, 57);
			Match(input,SLIST,Follow._SLIST_in_synpred23_NPortugolWalker366); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(70, 103);
				// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: ( statement )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if (((LA30_0>=ASGN && LA30_0<=CALL)||LA30_0==JMP||LA30_0==LOOP||(LA30_0>=RET && LA30_0<=SJMP)||LA30_0==VAR))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:70:103: statement
						{
						DebugLocation(70, 103);
						PushFollow(Follow._statement_in_synpred23_NPortugolWalker371);
						statement();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred23_NPortugolWalker_fragment", 43);
			LeaveRule("synpred23_NPortugolWalker_fragment", 43);
			LeaveRule_synpred23_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred23_NPortugolWalker

	partial void EnterRule_synpred31_NPortugolWalker_fragment();
	partial void LeaveRule_synpred31_NPortugolWalker_fragment();

	// $ANTLR start synpred31_NPortugolWalker
	public void synpred31_NPortugolWalker_fragment()
	{
		object a = default(object);

		EnterRule_synpred31_NPortugolWalker_fragment();
		EnterRule("synpred31_NPortugolWalker_fragment", 51);
		TraceIn("synpred31_NPortugolWalker_fragment", 51);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:7: ( ^( ASGN ID a= atom ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:115:7: ^( ASGN ID a= atom )
			{
			DebugLocation(115, 7);
			DebugLocation(115, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred31_NPortugolWalker666); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(115, 14);
			Match(input,ID,Follow._ID_in_synpred31_NPortugolWalker668); if (state.failed) return;
			DebugLocation(115, 18);
			PushFollow(Follow._atom_in_synpred31_NPortugolWalker672);
			a=atom();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred31_NPortugolWalker_fragment", 51);
			LeaveRule("synpred31_NPortugolWalker_fragment", 51);
			LeaveRule_synpred31_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred31_NPortugolWalker

	partial void EnterRule_synpred32_NPortugolWalker_fragment();
	partial void LeaveRule_synpred32_NPortugolWalker_fragment();

	// $ANTLR start synpred32_NPortugolWalker
	public void synpred32_NPortugolWalker_fragment()
	{
		EnterRule_synpred32_NPortugolWalker_fragment();
		EnterRule("synpred32_NPortugolWalker_fragment", 52);
		TraceIn("synpred32_NPortugolWalker_fragment", 52);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:116:7: ( ^( ASGN ^( AR INT ) ID plus_expression ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:116:7: ^( ASGN ^( AR INT ) ID plus_expression )
			{
			DebugLocation(116, 7);
			DebugLocation(116, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred32_NPortugolWalker684); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(116, 14);
			DebugLocation(116, 16);
			Match(input,AR,Follow._AR_in_synpred32_NPortugolWalker687); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(116, 19);
			Match(input,INT,Follow._INT_in_synpred32_NPortugolWalker689); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(116, 24);
			Match(input,ID,Follow._ID_in_synpred32_NPortugolWalker692); if (state.failed) return;
			DebugLocation(116, 27);
			PushFollow(Follow._plus_expression_in_synpred32_NPortugolWalker694);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred32_NPortugolWalker_fragment", 52);
			LeaveRule("synpred32_NPortugolWalker_fragment", 52);
			LeaveRule_synpred32_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred32_NPortugolWalker

	partial void EnterRule_synpred33_NPortugolWalker_fragment();
	partial void LeaveRule_synpred33_NPortugolWalker_fragment();

	// $ANTLR start synpred33_NPortugolWalker
	public void synpred33_NPortugolWalker_fragment()
	{
		CommonTree i = default(CommonTree);
		CommonTree p = default(CommonTree);

		EnterRule_synpred33_NPortugolWalker_fragment();
		EnterRule("synpred33_NPortugolWalker_fragment", 53);
		TraceIn("synpred33_NPortugolWalker_fragment", 53);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:117:7: ( ^( ASGN ^( AR i= ID ) p= ID plus_expression ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:117:7: ^( ASGN ^( AR i= ID ) p= ID plus_expression )
			{
			DebugLocation(117, 7);
			DebugLocation(117, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred33_NPortugolWalker712); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(117, 14);
			DebugLocation(117, 16);
			Match(input,AR,Follow._AR_in_synpred33_NPortugolWalker715); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(117, 20);
			i=(CommonTree)Match(input,ID,Follow._ID_in_synpred33_NPortugolWalker719); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(117, 26);
			p=(CommonTree)Match(input,ID,Follow._ID_in_synpred33_NPortugolWalker724); if (state.failed) return;
			DebugLocation(117, 30);
			PushFollow(Follow._plus_expression_in_synpred33_NPortugolWalker726);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred33_NPortugolWalker_fragment", 53);
			LeaveRule("synpred33_NPortugolWalker_fragment", 53);
			LeaveRule_synpred33_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred33_NPortugolWalker

	partial void EnterRule_synpred34_NPortugolWalker_fragment();
	partial void LeaveRule_synpred34_NPortugolWalker_fragment();

	// $ANTLR start synpred34_NPortugolWalker
	public void synpred34_NPortugolWalker_fragment()
	{
		EnterRule_synpred34_NPortugolWalker_fragment();
		EnterRule("synpred34_NPortugolWalker_fragment", 54);
		TraceIn("synpred34_NPortugolWalker_fragment", 54);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:118:7: ( ^( ASGN ID plus_expression ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:118:7: ^( ASGN ID plus_expression )
			{
			DebugLocation(118, 7);
			DebugLocation(118, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred34_NPortugolWalker748); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(118, 14);
			Match(input,ID,Follow._ID_in_synpred34_NPortugolWalker750); if (state.failed) return;
			DebugLocation(118, 17);
			PushFollow(Follow._plus_expression_in_synpred34_NPortugolWalker752);
			plus_expression();
			PopFollow();
			if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred34_NPortugolWalker_fragment", 54);
			LeaveRule("synpred34_NPortugolWalker_fragment", 54);
			LeaveRule_synpred34_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred34_NPortugolWalker

	partial void EnterRule_synpred35_NPortugolWalker_fragment();
	partial void LeaveRule_synpred35_NPortugolWalker_fragment();

	// $ANTLR start synpred35_NPortugolWalker
	public void synpred35_NPortugolWalker_fragment()
	{
		EnterRule_synpred35_NPortugolWalker_fragment();
		EnterRule("synpred35_NPortugolWalker_fragment", 55);
		TraceIn("synpred35_NPortugolWalker_fragment", 55);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:119:7: ( ^( ASGN ID 'nulo' ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:119:7: ^( ASGN ID 'nulo' )
			{
			DebugLocation(119, 7);
			DebugLocation(119, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred35_NPortugolWalker765); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(119, 14);
			Match(input,ID,Follow._ID_in_synpred35_NPortugolWalker767); if (state.failed) return;
			DebugLocation(119, 17);
			Match(input,77,Follow._77_in_synpred35_NPortugolWalker769); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred35_NPortugolWalker_fragment", 55);
			LeaveRule("synpred35_NPortugolWalker_fragment", 55);
			LeaveRule_synpred35_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred35_NPortugolWalker

	partial void EnterRule_synpred36_NPortugolWalker_fragment();
	partial void LeaveRule_synpred36_NPortugolWalker_fragment();

	// $ANTLR start synpred36_NPortugolWalker
	public void synpred36_NPortugolWalker_fragment()
	{
		EnterRule_synpred36_NPortugolWalker_fragment();
		EnterRule("synpred36_NPortugolWalker_fragment", 56);
		TraceIn("synpred36_NPortugolWalker_fragment", 56);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:120:7: ( ^( ASGN ID 'falso' ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:120:7: ^( ASGN ID 'falso' )
			{
			DebugLocation(120, 7);
			DebugLocation(120, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred36_NPortugolWalker782); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(120, 14);
			Match(input,ID,Follow._ID_in_synpred36_NPortugolWalker784); if (state.failed) return;
			DebugLocation(120, 17);
			Match(input,76,Follow._76_in_synpred36_NPortugolWalker786); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred36_NPortugolWalker_fragment", 56);
			LeaveRule("synpred36_NPortugolWalker_fragment", 56);
			LeaveRule_synpred36_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred36_NPortugolWalker

	partial void EnterRule_synpred37_NPortugolWalker_fragment();
	partial void LeaveRule_synpred37_NPortugolWalker_fragment();

	// $ANTLR start synpred37_NPortugolWalker
	public void synpred37_NPortugolWalker_fragment()
	{
		EnterRule_synpred37_NPortugolWalker_fragment();
		EnterRule("synpred37_NPortugolWalker_fragment", 57);
		TraceIn("synpred37_NPortugolWalker_fragment", 57);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:121:7: ( ^( ASGN ID 'verdadeiro' ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:121:7: ^( ASGN ID 'verdadeiro' )
			{
			DebugLocation(121, 7);
			DebugLocation(121, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred37_NPortugolWalker799); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(121, 14);
			Match(input,ID,Follow._ID_in_synpred37_NPortugolWalker801); if (state.failed) return;
			DebugLocation(121, 17);
			Match(input,78,Follow._78_in_synpred37_NPortugolWalker803); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred37_NPortugolWalker_fragment", 57);
			LeaveRule("synpred37_NPortugolWalker_fragment", 57);
			LeaveRule_synpred37_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred37_NPortugolWalker

	partial void EnterRule_synpred38_NPortugolWalker_fragment();
	partial void LeaveRule_synpred38_NPortugolWalker_fragment();

	// $ANTLR start synpred38_NPortugolWalker
	public void synpred38_NPortugolWalker_fragment()
	{
		CommonTree l = default(CommonTree);
		CommonTree r = default(CommonTree);

		EnterRule_synpred38_NPortugolWalker_fragment();
		EnterRule("synpred38_NPortugolWalker_fragment", 58);
		TraceIn("synpred38_NPortugolWalker_fragment", 58);
		try
		{
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:122:7: ( ^( ASGN ID l= INT r= INT ) )
			DebugEnterAlt(1);
			// C:\\Git\\NPortugol\\src\\grammar\\NPortugolWalker.g:122:7: ^( ASGN ID l= INT r= INT )
			{
			DebugLocation(122, 7);
			DebugLocation(122, 9);
			Match(input,ASGN,Follow._ASGN_in_synpred38_NPortugolWalker824); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(122, 14);
			Match(input,ID,Follow._ID_in_synpred38_NPortugolWalker826); if (state.failed) return;
			DebugLocation(122, 18);
			l=(CommonTree)Match(input,INT,Follow._INT_in_synpred38_NPortugolWalker830); if (state.failed) return;
			DebugLocation(122, 24);
			r=(CommonTree)Match(input,INT,Follow._INT_in_synpred38_NPortugolWalker834); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		finally
		{
			TraceOut("synpred38_NPortugolWalker_fragment", 58);
			LeaveRule("synpred38_NPortugolWalker_fragment", 58);
			LeaveRule_synpred38_NPortugolWalker_fragment();
		}
	}
	// $ANTLR end synpred38_NPortugolWalker
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declare_function_in_script62 = new BitSet(new ulong[]{0x10002UL});
		public static readonly BitSet _FUNC_in_declare_function76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_declare_function78 = new BitSet(new ulong[]{0x220000000UL});
		public static readonly BitSet _function_param_list_in_declare_function80 = new BitSet(new ulong[]{0x220000000UL});
		public static readonly BitSet _SLIST_in_declare_function84 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_declare_function86 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _declare_local_in_statement103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_stat_in_statement108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_stat_in_statement114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_stat_in_statement119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _repeat_stat_in_statement124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_statement129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_var_in_statement135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_stat_in_statement140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _asm_code_in_statement145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARAM_in_function_param_list165 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_param_list169 = new BitSet(new ulong[]{0x40008UL});
		public static readonly BitSet _VAR_in_declare_local188 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_declare_local192 = new BitSet(new ulong[]{0x40008UL});
		public static readonly BitSet _SJMP_in_if_stat210 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat213 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat215 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat219 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat221 = new BitSet(new ulong[]{0x23828001C0UL});
		public static readonly BitSet _senao_stat_in_if_stat226 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _JMP_in_if_stat235 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_if_stat238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_if_stat240 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_if_stat244 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_if_stat246 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _SLIST_in_senao_stat265 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_senao_stat267 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_for_stat291 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat295 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_for_stat301 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_for_stat304 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat309 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_for_stat322 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat324 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat328 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_for_stat334 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_for_stat337 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat341 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_for_stat353 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_for_stat357 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_for_stat363 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_for_stat366 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat371 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_for_stat384 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_for_stat386 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_for_stat390 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_for_stat396 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_for_stat399 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_for_stat403 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_while_stat425 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEXP_in_while_stat428 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_while_stat432 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SLIST_in_while_stat436 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_while_stat439 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_repeat_stat473 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SLIST_in_repeat_stat476 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_repeat_stat480 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LEXP_in_repeat_stat485 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logic_expression_in_repeat_stat487 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_function_call508 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_function_call510 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_function_call512 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _PCALL_in_property_call533 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_property_call537 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_property_call541 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MCALL_in_method_call566 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_method_call570 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_method_call574 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _function_arg_list_in_method_call576 = new BitSet(new ulong[]{0x28UL});
		public static readonly BitSet _ARG_in_function_arg_list603 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_function_arg_list605 = new BitSet(new ulong[]{0x4B20C4454C108UL});
		public static readonly BitSet _ASM_in_asm_code621 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_asm_code625 = new BitSet(new ulong[]{0x400000008UL});
		public static readonly BitSet _ASGN_in_assign_var666 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var668 = new BitSet(new ulong[]{0xC0044C000UL});
		public static readonly BitSet _atom_in_assign_var672 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var684 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var687 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var689 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var692 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_assign_var694 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var712 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_assign_var715 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var719 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_assign_var724 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_assign_var726 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var748 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var750 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_assign_var752 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var765 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var767 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_assign_var769 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var782 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var784 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_assign_var786 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var799 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var801 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_assign_var803 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var824 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var826 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_assign_var830 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_assign_var834 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_assign_var846 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_assign_var848 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ILIST_in_assign_var851 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_assign_var855 = new BitSet(new ulong[]{0x400008UL});
		public static readonly BitSet _RET_in_return_stat878 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_return_stat880 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _45_in_plus_expression905 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression907 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression909 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _47_in_plus_expression917 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression919 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression921 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _44_in_plus_expression929 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression931 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression933 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _50_in_plus_expression941 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression943 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression945 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _41_in_plus_expression953 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_plus_expression955 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_plus_expression957 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDEX_in_plus_expression965 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_plus_expression967 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEX_in_plus_expression977 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_plus_expression981 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_plus_expression986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_call_in_plus_expression992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _method_call_in_plus_expression996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_call_in_plus_expression1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_plus_expression1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_logic_expression1017 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1019 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1021 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _56_in_logic_expression1032 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1034 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1036 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _53_in_logic_expression1047 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1049 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1051 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _57_in_logic_expression1062 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1064 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1066 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _55_in_logic_expression1077 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1079 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1081 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _39_in_logic_expression1092 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1094 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1096 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _62_in_logic_expression1107 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1109 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1111 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _67_in_logic_expression1120 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _plus_expression_in_logic_expression1122 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_logic_expression1124 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _plus_expression_in_logic_expression1136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_atom1164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_atom1176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_atom1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom1198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _T_in_atom1209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _F_in_atom1224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOOP_in_synpred19_NPortugolWalker291 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred19_NPortugolWalker295 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_synpred19_NPortugolWalker301 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_synpred19_NPortugolWalker304 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred19_NPortugolWalker309 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_synpred21_NPortugolWalker322 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DEC_in_synpred21_NPortugolWalker324 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _assign_var_in_synpred21_NPortugolWalker328 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_synpred21_NPortugolWalker334 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_synpred21_NPortugolWalker337 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred21_NPortugolWalker341 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _LOOP_in_synpred23_NPortugolWalker353 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assign_var_in_synpred23_NPortugolWalker357 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _ID_in_synpred23_NPortugolWalker363 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _SLIST_in_synpred23_NPortugolWalker366 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _statement_in_synpred23_NPortugolWalker371 = new BitSet(new ulong[]{0x21828001C8UL});
		public static readonly BitSet _ASGN_in_synpred31_NPortugolWalker666 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred31_NPortugolWalker668 = new BitSet(new ulong[]{0xC0044C000UL});
		public static readonly BitSet _atom_in_synpred31_NPortugolWalker672 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred32_NPortugolWalker684 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred32_NPortugolWalker687 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _INT_in_synpred32_NPortugolWalker689 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred32_NPortugolWalker692 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_synpred32_NPortugolWalker694 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred33_NPortugolWalker712 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _AR_in_synpred33_NPortugolWalker715 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred33_NPortugolWalker719 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_synpred33_NPortugolWalker724 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_synpred33_NPortugolWalker726 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred34_NPortugolWalker748 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred34_NPortugolWalker750 = new BitSet(new ulong[]{0x4B20C4454C100UL});
		public static readonly BitSet _plus_expression_in_synpred34_NPortugolWalker752 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred35_NPortugolWalker765 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred35_NPortugolWalker767 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_synpred35_NPortugolWalker769 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred36_NPortugolWalker782 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred36_NPortugolWalker784 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_synpred36_NPortugolWalker786 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred37_NPortugolWalker799 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred37_NPortugolWalker801 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_synpred37_NPortugolWalker803 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASGN_in_synpred38_NPortugolWalker824 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_synpred38_NPortugolWalker826 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_synpred38_NPortugolWalker830 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INT_in_synpred38_NPortugolWalker834 = new BitSet(new ulong[]{0x8UL});
	}
	#endregion Follow sets
}

} // namespace NPortugol
